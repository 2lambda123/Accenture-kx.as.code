[
  {
    "name": "jira",
    "namespace": "atlassian",
    "installation_type": "argocd",
    "installation_group_folder": "collaboration",
    "argocd_params": {
      "repository": "{{gitUrl}}/devops/jira.git",
      "path": ".",
      "dest_server": "https://kubernetes.default.svc",
      "dest_namespace": "{{namespace}}",
      "sync_policy": "automated",
      "auto_prune": true,
      "self_heal": true
    },
    "categories": ["collaboration", "agile-management"],
    "urls": [
      {
        "url": "https://{{componentName}}.{{baseDomain}}",
        "healthchecks": {
          "liveliness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          },
          "readiness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          }
        }
      }
    ],
    "Description": "Atlassian Jira Description",
    "shortcut_text": "Atlassian Jira",
    "shortcut_icon": "jira.png",
    "pre_install_scripts": ["createGitProject.sh", "populateGitProject.sh"],
    "post_install_scripts": []
  },
  {
    "name": "confluence",
    "namespace": "atlassian",
    "installation_type": "argocd",
    "installation_group_folder": "collaboration",
    "argocd_params": {
      "repository": "{{gitUrl}}/devops/confluence.git",
      "path": ".",
      "dest_server": "https://kubernetes.default.svc",
      "dest_namespace": "{{namespace}}",
      "sync_policy": "automated",
      "auto_prune": true,
      "self_heal": true
    },
    "categories": ["collaboration", "wiki"],
    "urls": [
      {
        "url": "https://{{componentName}}.{{baseDomain}}",
        "healthchecks": {
          "liveliness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          },
          "readiness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          }
        }
      }
    ],
    "Description": "Atlassian Confluence Description",
    "shortcut_text": "Atlassian Confluence",
    "shortcut_icon": "confluence.png",
    "pre_install_scripts": ["createGitProject.sh", "populateGitProject.sh"],
    "post_install_scripts": []
  },
  {
    "name": "mattermost",
    "namespace": "mattermost",
    "installation_type": "helm",
    "installation_group_folder": "collaboration",
    "minimum_resources": {
      "cpu": "250",
      "memory": "256"
    },
    "environment_variables": {
      "imageTag": "5.38.0"
    },
    "helm_params": {
      "repository_url": "https://helm.mattermost.com",
      "repository_name": "mattermost/mattermost-team-edition",
      "helm_version": "5.4.0",
      "set_key_values": []
    },
    "categories": ["chatops", "collaboration"],
    "urls": [
      {
        "url": "https://{{componentName}}.{{baseDomain}}",
        "healthchecks": {
          "liveliness": {
            "http_path": "/api/v4/system/ping",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          },
          "readiness": {
            "http_path": "/api/v4/system/ping",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": ".status",
              "json_value": "OK"
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          }
        }
      }
    ],
    "Description": "Mattermost ChatOps Collaboration",
    "shortcut_text": "Mattermost",
    "shortcut_icon": "mattermost.png",
    "postman_docs_url": "https://documenter.getpostman.com/view/4508214/RW8FERUn",
    "api_docs_url": "https://api.mattermost.com/",
    "vendor_docs_url": "https://docs.mattermost.com/",
    "health_check_command": "",
    "expected_check_command_response": "",
    "pre_install_scripts": ["createSecret.sh", "createS3Bucket.sh"],
    "post_install_scripts": [
      "createInitialAdminUser.sh",
      "createNotificationUsers.sh",
      "createTeams.sh",
      "mapUsersToTeams.sh",
      "createChannels.sh",
      "createWebhooks.sh"
    ]
  },
  {
    "name": "rocketchat",
    "namespace": "rocketchat",
    "installation_type": "helm",
    "installation_group_folder": "collaboration",
    "environment_variables": {
      "imageTag": "3.14.5",
      "organizationType": "community",
      "organizationName": "KX.AS.CODE ChatOps",
      "channelsToCreate": "General,Security,Monitoring,CICD"
    },
    "minimum_resources": {
      "cpu": "250",
      "memory": "256"
    },
    "helm_params": {
      "repository_url": "https://rocketchat.github.io/helm-charts",
      "repository_name": "stable/rocketchat",
      "helm_version": "3.1.0",
      "set_key_values": []
    },
    "categories": ["chatops", "collaboration"],
    "urls": [
      {
        "url": "https://{{componentName}}.{{baseDomain}}",
        "healthchecks": {
          "liveliness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          },
          "readiness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          }
        }
      }
    ],
    "Description": "Rocketchat ChatOps Collaboration",
    "shortcut_text": "Rocketchat",
    "shortcut_icon": "rocketchat.png",
    "api_docs_url": "https://docs.rocket.chat/api/rest-api",
    "vendor_docs_url": "https://docs.rocket.chat/",
    "health_check_command": "",
    "expected_check_command_response": "",
    "pre_install_scripts": [
      "createMongoDbPasswords.sh",
      "createRocketChatAdminPassword.sh"
    ],
    "post_install_scripts": ["loginToRocketChat.sh", "createChannels.sh"]
  },

  {
    "name": "kx.as.code_techradar",
    "namespace": "devops",
    "installation_type": "argocd",
    "installation_group_folder": "kx_as_code",
    "retry": "true",
    "argocd_params": {
      "repository": "{{gitUrl}}/kx.as.code/kx.as.code_techradar.git",
      "path": "kubernetes",
      "dest_server": "https://kubernetes.default.svc",
      "dest_namespace": "devops",
      "sync_policy": "automated",
      "auto_prune": true,
      "self_heal": true
    },
    "categories": ["kx.as.code"],
    "urls": [
      {
        "url": "https://techradar.{{baseDomain}}",
        "healthchecks": {
          "liveliness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          },
          "readiness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          }
        }
      }
    ],
    "Description": "Tech Radar Description",
    "shortcut_text": "Tech Radar",
    "shortcut_icon": "techradar.png",
    "pre_install_scripts": [
      "createGitProject.sh",
      "populateGitProject.sh",
      "buildAndPushDockerImage.sh"
    ],
    "post_install_scripts": []
  },
  {
    "name": "cfssl-certificate-authority",
    "namespace": "",
    "installation_type": "script",
    "installation_group_folder": "core",
    "environment_variables": {
      "cfsslVersion": "1.6.1"
    },
    "install_scripts": ["installCfsslCertificateAuthority.sh"],
    "Description": "CFSSL Certificate Authority",
    "shortcut_text": "CFSSL-CA",
    "shortcut_icon": "cloudflare.png",
    "pre_install_scripts": [],
    "post_install_scripts": ["installNginx.sh"]
  },
  {
    "name": "nginx-ingress-controller",
    "namespace": "nginx-ingress-controller",
    "installation_type": "helm",
    "installation_group_folder": "core",
    "environment_variables": {
      "nginxControllerVersion": "v1.0.2"
    },
    "retry": "true",
    "helm_params": {
      "repository_url": "https://kubernetes.github.io/ingress-nginx",
      "repository_name": "ingress-nginx/ingress-nginx",
      "helm_version": "4.0.3",
      "set_key_values": [
        "controller.image.tag={{nginxControllerVersion}}",
        "rbac.create=true",
        "controller.extraArgs.default-ssl-certificate={{namespace}}/kx.as.code-wildcard-cert",
        "controller.extraArgs.enable-ssl-passthrough=",
        "controller.hostNetwork=true",
        "controller.extraArgs.report-node-internal-ip-address=",
        "controller.tolerations[0].effect=NoSchedule",
        "controller.tolerations[0].key=node-role.kubernetes.io/master"
      ],
      "set_string_key_values": [
        "controller.nodeSelector.\"ingress-controller\"=true"
      ]
    },
    "Description": "NGINX Ingress Controller",
    "shortcut_text": "NGINX Ingress Controller",
    "shortcut_icon": "nginx.png",
    "pre_install_scripts": ["createWildcardCertSecret.sh", "addNodeLabel.sh"],
    "post_install_scripts": ["workaround.sh", "adjustNumReplicas.sh"]
  },
  {
    "name": "konetena-lens",
    "namespace": "",
    "installation_type": "script",
    "installation_group_folder": "core",
    "environment_variables": {
      "lensVersion": "5.2.5-latest.20211001.2"
    },
    "install_scripts": ["installKontenaLens.sh"],
    "Description": "Kubernetes Admin Client",
    "shortcut_text": "Kontena Lens",
    "shortcut_icon": "",
    "pre_install_scripts": [],
    "post_install_scripts": []
  },
  {
    "name": "metrics-server",
    "namespace": "kube-system",
    "installation_type": "script",
    "installation_group_folder": "core",
    "environment_variables": {
      "metricsServerVersion": "v0.5.1"
    },
    "retry": "true",
    "install_scripts": ["installMetricsServer.sh"],
    "Description": "Metrics Server",
    "shortcut_text": "Metrics Server",
    "shortcut_icon": "kubernetes.png",
    "pre_install_scripts": [],
    "post_install_scripts": []
  },
  {
    "name": "glusterfs-storage",
    "namespace": "kube-system",
    "installation_type": "script",
    "installation_group_folder": "core",
    "environment_variables": {
      "glusterfsVersion": "8.6",
      "heketiVersion": "10.4.0"
    },
    "install_scripts": ["installGlusterFs.sh"],
    "Description": "GlusterFS Network Storage (slow)",
    "shortcut_text": "GlusterFS",
    "shortcut_icon": "glusterfs.png",
    "pre_install_scripts": [],
    "post_install_scripts": []
  },
  {
    "name": "kubernetes-dashboard",
    "namespace": "kubernetes-dashboard",
    "installation_type": "script",
    "installation_group_folder": "core",
    "environment_variables": {
      "kubernetesDashboardVersion": "2.3.1"
    },
    "retry": "true",
    "categories": ["management", "kubernetes"],
    "letsencrypt": {
      "enabled": true
    },
    "urls": [
      {
        "url": "https://{{componentName}}.{{baseDomain}}",
        "healthchecks": {
          "liveliness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          },
          "readiness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            }
          }
        }
      }
    ],
    "Description": "Kubernetes Dashboard Description",
    "shortcut_text": "Kubernetes Dashboard",
    "shortcut_icon": "kubernetes.png",
    "install_scripts": ["installDashboard.sh"],
    "pre_install_scripts": [],
    "post_install_scripts": [
      "checkK8sHealthAfterReboot.sh",
      "createDesktopShortcuts.sh",
      "deployOauth2.sh"
    ]
  },
  {
    "name": "cert-manager",
    "namespace": "cert-manager",
    "installation_type": "helm",
    "installation_group_folder": "core",
    "environment_variables": {
      "imageTag": "v1.5.4"
    },
    "retry": "true",
    "helm_params": {
      "repository_url": "https://charts.jetstack.io",
      "repository_name": "jetstack/cert-manager",
      "helm_version": "v1.5.4",
      "set_key_values": ["image.tag={{imageTag}}", "installCRDs=true"]
    },
    "install_scripts": ["installCertManager.sh"],
    "Description": "Cert Manager",
    "shortcut_text": "Cert Manager",
    "shortcut_icon": "cert-manager.png",
    "pre_install_scripts": [],
    "post_install_scripts": ["installLetsEncryptIssuer.sh"]
  },
  {
    "name": "metallb-loadbalancer",
    "namespace": "metallb-system",
    "installation_type": "script",
    "installation_group_folder": "core",
    "environment_variables": {
      "metalLbVersion": "v0.10.2"
    },
    "retry": "true",
    "install_scripts": ["installMetalLb.sh"],
    "pre_install_scripts": ["createMemberListSecret.sh"],
    "Description": "MetalLB Load Balancer",
    "shortcut_text": "MetalLB Load Balancer",
    "shortcut_icon": "metallb.png",
    "post_install_scripts": []
  },
  {
    "name": "user-setup",
    "namespace": "",
    "installation_type": "script",
    "installation_group_folder": "core",
    "install_scripts": ["createUsers.sh"],
    "Description": "Create additional users",
    "shortcut_text": "Create Users",
    "shortcut_icon": "",
    "pre_install_scripts": [],
    "post_install_scripts": []
  },
  {
    "name": "kubernetes-tools",
    "namespace": "kube-system",
    "installation_type": "script",
    "installation_group_folder": "core",
    "retry": "true",
    "install_scripts": ["installKubernetesTools.sh"],
    "Description": "Kubernetes Tools",
    "shortcut_text": "Kubernetes Tools",
    "shortcut_icon": "kubernetes.png",
    "pre_install_scripts": [],
    "post_install_scripts": []
  },
  {
    "name": "local-storage",
    "namespace": "kube-system",
    "installation_type": "script",
    "installation_group_folder": "core",
    "environment_variables": {
      "localProvisionerVersion": "2.4.0",
      "hostDirectory": "/mnt/k8s_local_volumes",
      "storageClassName": "local-storage",
      "fsType": "xfs"
    },
    "install_scripts": ["installLocalStorage.sh"],
    "Description": "Local Storage (fast)",
    "shortcut_text": "Local Storage",
    "shortcut_icon": "local-storage.png",
    "pre_install_scripts": [],
    "post_install_scripts": []
  },
  {
    "name": "kubernetes-base-services",
    "namespace": "kube-system",
    "installation_type": "script",
    "installation_group_folder": "core",
    "install_scripts": ["installKubernetesBaseServices.sh"],
    "Description": "Kubernetes Base Services",
    "shortcut_text": "Kubernetes Base Services",
    "shortcut_icon": "kubernetes.png",
    "pre_install_scripts": [],
    "post_install_scripts": [
      "configureCoreDnsWithKxAsCodeDnsServer.sh",
      "enableWorkloadsOnMaster.sh"
    ]
  },
  {
    "name": "calico-network",
    "namespace": "kube-system",
    "installation_type": "script",
    "installation_group_folder": "core",
    "environment_variables": {
      "calicoVersion": "v3.19",
      "calicoCtlVersion": "v3.19.1"
    },
    "retry": "true",
    "install_scripts": ["installCalicoNetwork.sh"],
    "Description": "Calico Network",
    "shortcut_text": "Calico Network",
    "shortcut_icon": "calico.png",
    "pre_install_scripts": [],
    "post_install_scripts": []
  },
  {
    "name": "kxascode-basic",
    "namespace": "devops",
    "installation_type": "script",
    "installation_group_folder": "core",
    "retry": "true",
    "letsencrypt": {
      "enabled": true
    },
    "install_scripts": ["installKxAsCodeAppsWithoutTools.sh"],
    "Description": "KX.AS.CODE Basic Install without ArgoCD, Gitlab and Harbor",
    "shortcut_text": "KX.AS.CODE Base Apps",
    "shortcut_icon": "kxascode.png",
    "pre_install_scripts": [],
    "post_install_scripts": []
  },
  {
    "name": "openldap",
    "namespace": "",
    "installation_type": "script",
    "installation_group_folder": "core",
    "install_scripts": ["install-and-configure-openldap.sh"],
    "Description": "",
    "shortcut_text": "",
    "shortcut_icon": "",
    "pre_install_scripts": [],
    "post_install_scripts": [
      "enableOpenLdapTls.sh",
      "installSsd.sh",
      "installAdminClient.sh",
      "createDesktopShortcut.sh"
    ]
  },
  {
    "name": "keycloak",
    "namespace": "keycloak",
    "installation_type": "helm",
    "installation_group_folder": "core",
    "environment_variables": {
      "kcContainer": "keycloak",
      "imageTag": "15.0.2"
    },
    "retry": "true",
    "helm_params": {
      "repository_url": "https://codecentric.github.io/helm-charts",
      "repository_name": "codecentric/keycloak",
      "helm_version": "15.1.0",
      "set_key_values": []
    },
    "letsencrypt": {
      "enabled": true
    },
    "urls": [
      {
        "url": "https://{{componentName}}.{{baseDomain}}",
        "healthchecks": {
          "liveliness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          },
          "readiness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          }
        }
      }
    ],
    "Description": "Keycloak IAM",
    "shortcut_text": "Keycloak IAM",
    "shortcut_icon": "keycloak.png",
    "pre_install_scripts": [
      "createKeycloakAdminPassword.sh",
      "createConfigMap.sh"
    ],
    "post_install_scripts": [
      "configureKeycloak.sh",
      "configureK8s.sh",
      "activateAdditionalSettings.sh",
      "installPlugins.sh",
      "createDesktopShortcuts.sh"
    ]
  },
  {
    "name": "remote-desktop",
    "namespace": "",
    "installation_type": "script",
    "installation_group_folder": "core",
    "environment_variables": {
      "guacamoleVersion": "1.3.0",
      "postgresqlDriverVersion": "42.2.19"
    },
    "install_scripts": ["install-guacamole-remote-desktop.sh"],
    "Description": "Guacamole Remote Desktop",
    "shortcut_text": "Guacamole Remote Desktop",
    "shortcut_icon": "",
    "pre_install_scripts": [],
    "post_install_scripts": [
      "configureXrdpConnection.sh",
      "installPgAdmin.sh",
      "createDesktopShortcuts.sh"
    ]
  },
  {
    "name": "gopass",
    "namespace": "",
    "installation_type": "script",
    "installation_group_folder": "core",
    "environment_variables": {
      "gopassVersion": "1.12.6",
      "gopassUiVersion": "0.8.0"
    },
    "install_scripts": ["install-and-configure-gopass.sh"],
    "Description": "Gopass CLI credential manager",
    "shortcut_text": "GoPass UI",
    "shortcut_icon": "gopass.png",
    "pre_install_scripts": [],
    "post_install_scripts": ["createDesktopShortcuts.sh"]
  },
  {
    "name": "sysdig-falco",
    "namespace": "sysdig-falco",
    "installation_type": "helm",
    "installation_group_folder": "security",
    "environment_variables": {
      "logLevel": "debug",
      "priority": "notice"
    },
    "helm_params": {
      "repository_url": "https://falcosecurity.github.io/charts",
      "repository_name": "falcosecurity/falco",
      "helm_version": "",
      "set_key_values": []
    },
    "categories": ["security", "credential-store"],
    "urls": [
      {
        "url": "",
        "healthchecks": {
          "liveliness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          },
          "readiness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          }
        }
      }
    ],
    "Description": "Container Runtime Security",
    "shortcut_text": "Sysdig Falco",
    "shortcut_icon": "sysdig-falco.png",
    "pre_install_scripts": ["getMattermostIntegrationId.sh"],
    "post_install_scripts": []
  },
  {
    "name": "sysdig-falco",
    "namespace": "sysdig-falco",
    "installation_type": "helm",
    "installation_group_folder": "security",
    "environment_variables": {
      "logLevel": "debug",
      "priority": "notice"
    },
    "helm_params": {
      "repository_url": "https://falcosecurity.github.io/charts",
      "repository_name": "falcosecurity/falco",
      "helm_version": "",
      "set_key_values": []
    },
    "categories": ["security", "credential-store"],
    "urls": [
      {
        "url": "",
        "healthchecks": {
          "liveliness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          },
          "readiness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          }
        }
      }
    ],
    "Description": "Container Runtime Security",
    "shortcut_text": "Sysdig Falco",
    "shortcut_icon": "sysdig-falco.png",
    "pre_install_scripts": ["getMattermostIntegrationId.sh"],
    "post_install_scripts": []
  },
  {
    "name": "bitwarden",
    "namespace": "",
    "installation_type": "script",
    "installation_group_folder": "core",
    "install_scripts": ["install-and-configure-bitwarden.sh"],
    "Description": "Bitwarden credential manager",
    "shortcut_text": "Bitwarden",
    "shortcut_icon": "bitwarden.png",
    "pre_install_scripts": [],
    "post_install_scripts": ["createDesktopShortcuts.sh"]
  },
  {
    "name": "sysdig-falco",
    "namespace": "sysdig-falco",
    "installation_type": "helm",
    "installation_group_folder": "security",
    "environment_variables": {
      "logLevel": "debug",
      "priority": "notice"
    },
    "helm_params": {
      "repository_url": "https://falcosecurity.github.io/charts",
      "repository_name": "falcosecurity/falco",
      "helm_version": "",
      "set_key_values": []
    },
    "categories": ["security", "credential-store"],
    "urls": [
      {
        "url": "",
        "healthchecks": {
          "liveliness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          },
          "readiness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          }
        }
      }
    ],
    "Description": "Container Runtime Security",
    "shortcut_text": "Sysdig Falco",
    "shortcut_icon": "sysdig-falco.png",
    "pre_install_scripts": ["getMattermostIntegrationId.sh"],
    "post_install_scripts": []
  },
  {
    "name": "vault",
    "namespace": "vault",
    "installation_type": "helm",
    "installation_group_folder": "security",
    "helm_params": {
      "repository_url": "https://helm.releases.hashicorp.com",
      "repository_name": "hashicorp/vault",
      "helm_version": "",
      "set_key_values": []
    },
    "categories": ["security", "credential-store"],
    "urls": [
      {
        "url": "https://{{componentName}}.{{baseDomain}}",
        "healthchecks": {
          "liveliness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          },
          "readiness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          }
        }
      }
    ],
    "Description": "HashiCorp Vault Description",
    "shortcut_text": "HashiCorp Vault",
    "shortcut_icon": "vault.png",
    "pre_install_scripts": [],
    "post_install_scripts": [
      "initialiseVault.sh",
      "unsealVault.sh",
      "enableUserPassAuth.sh",
      "createKxUser.sh"
    ]
  },
  {
    "metadata": {
      "defaultApplications": {
        "git": "cicd/gitlab-ce",
        "oauth": "cicd/gitlab-ce",
        "chatops": "collaboration/mattermost",
        "docker-registry": "cicd/harbor",
        "s3-object-store": "storage/minio-s3"
      },
      "available": {
        "applications": [
          {
            "install_folder": "cicd",
            "name": "argocd"
          },
          {
            "install_folder": "cicd",
            "name": "artifactory-oss"
          },
          {
            "install_folder": "core",
            "name": "calico-network"
          },
          {
            "install_folder": "core",
            "name": "cert-manager"
          },
          {
            "install_folder": "core",
            "name": "cfssl-certificate-authority"
          },
          {
            "install_folder": "collaboration",
            "name": "confluence"
          },
          {
            "install_folder": "cicd",
            "name": "consul"
          },
          {
            "install_folder": "monitoring",
            "name": "elastic-apm-oss"
          },
          {
            "install_folder": "monitoring",
            "name": "elastic-elasticsearch-oss"
          },
          {
            "install_folder": "monitoring",
            "name": "elastic-filebeat-oss"
          },
          {
            "install_folder": "monitoring",
            "name": "elastic-kibana-oss"
          },
          {
            "install_folder": "cicd",
            "name": "gitlab-ce"
          },
          {
            "install_folder": "cicd",
            "name": "gitlab-runner"
          },
          {
            "install_folder": "core",
            "name": "glusterfs-storage"
          },
          {
            "install_folder": "monitoring",
            "name": "grafana"
          },
          {
            "install_folder": "monitoring",
            "name": "grafana-image-renderer"
          },
          {
            "install_folder": "monitoring",
            "name": "graphite"
          },
          {
            "install_folder": "cicd",
            "name": "harbor"
          },
          {
            "install_folder": "collaboration",
            "name": "jira"
          },
          {
            "install_folder": "core",
            "name": "keycloak"
          },
          {
            "install_folder": "core",
            "name": "kontena-lens"
          },
          {
            "install_folder": "core",
            "name": "kubernetes-base-services"
          },
          {
            "install_folder": "core",
            "name": "kubernetes-dashboard"
          },
          {
            "install_folder": "core",
            "name": "kubernetes-tools"
          },
          {
            "install_folder": "core",
            "name": "kxascode-basic"
          },
          {
            "install_folder": "kx_as_code",
            "name": "kx.as.code_docs"
          },
          {
            "install_folder": "kx_as_code",
            "name": "kx.as.code_techradar"
          },
          {
            "install_folder": "core",
            "name": "local-storage"
          },
          {
            "install_folder": "collaboration",
            "name": "mattermost"
          },
          {
            "install_folder": "core",
            "name": "metallb-loadbalancer"
          },
          {
            "install_folder": "core",
            "name": "metrics-server"
          },
          {
            "install_folder": "storage",
            "name": "minio-s3"
          },
          {
            "install_folder": "storage",
            "name": "nextcloud"
          },
          {
            "install_folder": "cicd",
            "name": "nexus3"
          },
          {
            "install_folder": "core",
            "name": "nginx-ingress-controller"
          },
          {
            "install_folder": "core",
            "name": "openldap"
          },
          {
            "install_folder": "monitoring",
            "name": "prometheus"
          },
          {
            "install_folder": "core",
            "name": "remote-desktop"
          },
          {
            "install_folder": "collaboration",
            "name": "rocketchat"
          },
          {
            "install_folder": "test_automation",
            "name": "selenium"
          },
          {
            "install_folder": "cicd",
            "name": "sonarqube"
          },
          {
            "install_folder": "security",
            "name": "sysdig-falco"
          },
          {
            "install_folder": "core",
            "name": "user-setup"
          }
        ],
        "groups": [
          {
            "name": "Heavy weight",
            "group_category": "cicd",
            "description": "Full enterprise like features covering the entire CICD stack",
            "components": [
              "minio_s3",
              "gitlab_ce",
              "artifactory",
              "mattermost",
              "harbor",
              "argocd",
              "gitlab_runner"
            ]
          },
          {
            "name": "Light weight",
            "group_category": "cicd",
            "description": "Good CICD featureset, light on needed resources",
            "components": [
              "gitea",
              "nexus3",
              "jenkins",
              "rocketchat",
              "docker-registry",
              "flux",
              "gitlab_runner"
            ]
          },
          {
            "name": "KX.AS.CODE",
            "group_category": "kxascode",
            "description": "KX.AS.CODE Docs and TechRadar applications",
            "components": ["kx_as_code_docs", "kx_as_code_techradar"]
          },
          {
            "name": "Prometheus, Grafana & ELK",
            "group_category": "monitoring",
            "description": "Kubernetes monitoring, alerting, log aggregation and visualization",
            "components": [
              "prometheus",
              "grafana",
              "grafana-image-renderer",
              "elastic-elasticsearch-oss",
              "elastic-kibana-oss",
              "elastic-filebeat-oss"
            ]
          },
          {
            "name": "Tick Stack & ELK",
            "group_category": "monitoring",
            "description": "Kubernetes monitoring with the Tick Stack",
            "components": [
              "tickstack",
              "grafana",
              "grafana-image-renderer",
              "elastic-elasticsearch-oss",
              "elastic-kibana-oss",
              "elastic-filebeat-oss"
            ]
          },
          {
            "name": "Elastic Stack Only",
            "group_category": "monitoring",
            "description": "Kubernetes monitoring with the Tick Stack",
            "components": [
              "elastic-elasticsearch-oss",
              "elastic-kibana-oss",
              "elastic-filebeat-oss"
            ]
          },
          {
            "name": "Quality Assurance",
            "group_category": "quality_assurance",
            "description": "Quality assurance, including browser test automation and code quality checks",
            "components": ["sonarqube", "selenium"]
          },
          {
            "name": "Security",
            "group_category": "security",
            "description": "Centralized secrets management and Kubernetes runtime security",
            "components": ["sysdig_falco", "consul", "vault"]
          },
          {
            "name": "Collaboration",
            "group_category": "collaboration",
            "description": "Collaboration with Atalassina tools. Note, these are not OpenSource",
            "components": ["jira", "confluence"]
          }
        ],
        "super_groups": [
          {
            "name": "AWESOME Mode",
            "description": "At least one group from all group categories",
            "groups": [
              {
                "name": "Heavy Weight",
                "group_category": "cicd"
              },
              {
                "name": "Prometheus, Grafana & ELK",
                "group_category": "monitoring"
              },
              {
                "name": "Quality Assurance",
                "group_category": "quality_assurance"
              },
              {
                "name": "Security",
                "group_category": "security"
              }
            ]
          },
          {
            "name": "Light Mode",
            "description": "Minimal CICD setup",
            "groups": [
              {
                "name": "Light Weight",
                "group_category": "cicd"
              }
            ]
          }
        ]
      }
    }
  },
  {
    "name": "nextcloud",
    "namespace": "nextcloud",
    "installation_type": "helm",
    "installation_group_folder": "storage",
    "helm_params": {
      "repository_url": "https://nextcloud.github.io/helm/",
      "repository_name": "nextcloud/nextcloud",
      "helm_version": "",
      "set_key_values": [
        "nextcloud.host={{componentName}}.{{baseDomain}}",
        "nextcloud.username=admin",
        "nextcloud.password={{vmPassword}}",
        "persistence.enabled=true",
        "persistence.storageClass=local-storage",
        "persistence.size=1Gi",
        "persistence.accessMode=ReadWriteOnce",
        "postgresql.enabled=true",
        "postgresql.global.postgresql.postgresqlUsername=nextcloud",
        "postgresql.global.postgresql.postgresqlPassword={{nextcloudPostgresqlPassword}}",
        "postgresql.global.postgresql.postgresqlDatabase=nextcloud",
        "postgresql.persistence.enabled=true",
        "postgresql.persistence.storageClass=local-storage",
        "ingress.enabled=true",
        "ingress.hosts[0]={{componentName}}.{{baseDomain}}",
        "ingress.tls[0].hosts[0]={{componentName}}.{{baseDomain}}",
        "ingress.annotations.\"nginx\\.ingress\\.kubernetes\\.io/proxy-body-size\"=\"5000m\"",
        "service.type=ClusterIP"
      ]
    },
    "categories": ["storage", "cloud"],
    "urls": [
      {
        "url": "https://{{componentName}}.{{baseDomain}}",
        "healthchecks": {
          "liveliness": {
            "http_path": "/status.php",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": ".installed",
              "json_value": "true"
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          },
          "readiness": {
            "http_path": "/status.php",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": ".installed",
              "json_value": "true"
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          }
        }
      }
    ],
    "Description": "Nextcloud Storage",
    "shortcut_text": "Nextcloud",
    "shortcut_icon": "nextcloud.png",
    "api_docs_type": "web",
    "api_docs_url": "https://docs.nextcloud.com/server/18/developer_manual/client_apis/index.html",
    "vendor_docs_url": "https://docs.nextcloud.com/",
    "pre_install_scripts": ["createPostgresqlDbPasswords.sh"],
    "post_install_scripts": []
  },
  {
    "name": "minio-s3",
    "namespace": "minio-s3",
    "installation_type": "helm",
    "installation_group_folder": "storage",
    "helm_params": {
      "repository_url": "https://helm.min.io/",
      "repository_name": "minio/minio",
      "helm_version": "",
      "set_key_values": [
        "persistence.enabled=true",
        "persistence.storageClass=gluster-heketi",
        "persistence.size=10Gi",
        "persistence.accessMode=ReadWriteOnce",
        "existingSecret=minio-accesskey-secret",
        "ingress.enabled=true",
        "ingress.hosts[0]={{componentName}}.{{baseDomain}}",
        "ingress.tls[0].hosts[0]={{componentName}}.{{baseDomain}}",
        "ingress.annotations.\"nginx\\.ingress\\.kubernetes\\.io/proxy-body-size\"=\"1000m\"",
        "ingress.annotations.\"kubernetes\\.io/ingress\\.class\"=\"nginx\"",
        "mode=standalone",
        "service.type=ClusterIP",
        "environment.MINIO_REGION=eu-central-1"
      ]
    },
    "categories": ["s3-storage"],
    "urls": [
      {
        "url": "https://{{componentName}}.{{baseDomain}}",
        "healthchecks": {
          "liveliness": {
            "http_path": "/minio/health/ready",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          },
          "readiness": {
            "http_path": "/minio/health/ready",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          }
        }
      }
    ],
    "Description": "MinIO S3 Storage",
    "shortcut_text": "MinIO S3",
    "shortcut_icon": "minio.png",
    "api_docs_type": "web",
    "api_docs_url": "https://docs.min.io/docs/minio-client-complete-guide.html",
    "vendor_docs_url": "https://docs.min.io",
    "pre_install_scripts": ["createSecrets.sh", "installMinIoCli.sh"],
    "post_install_scripts": []
  },
  {
    "name": "nexus3",
    "namespace": "nexus3",
    "installation_type": "argocd",
    "installation_group_folder": "cicd",
    "argocd_params": {
      "repository": "{{gitUrl}}/devops/nexus3.git",
      "path": ".",
      "dest_server": "https://kubernetes.default.svc",
      "dest_namespace": "{{namespace}}",
      "sync_policy": "automated",
      "auto_prune": true,
      "self_heal": true
    },
    "categories": ["artifact-repository", "docker-registry"],
    "urls": [
      {
        "url": "https://{{componentName}}.{{baseDomain}}",
        "healthchecks": {
          "liveliness": {
            "http_path": "/service/metrics/ping",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          },
          "readiness": {
            "http_path": "/service/metrics/ping",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          }
        }
      }
    ],
    "Description": "Nexus3 Description",
    "shortcut_text": "Nexus3 OSS",
    "shortcut_icon": "nexus.png",
    "swagger_docs_url": "https://{{componentName}}.{{baseDomain}}/#admin/system/api",
    "api_docs_url": "https://help.sonatype.com/repomanager3/rest-and-integration-api",
    "vendor_docs_url": "https://help.sonatype.com/repomanager3",
    "pre_install_scripts": ["createGitProject.sh", "populateGitProject.sh"],
    "post_install_scripts": []
  },
  {
    "name": "harbor",
    "namespace": "harbor",
    "installation_type": "helm",
    "installation_group_folder": "cicd",
    "helm_params": {
      "repository_url": "https://helm.goharbor.io",
      "repository_name": "harbor/harbor",
      "helm_version": "1.7.3",
      "set_key_values": [
        "persistence.enabled=true",
        "persistence.persistentVolumeClaim.registry.storageClass=local-storage",
        "persistence.persistentVolumeClaim.registry.size=9Gi",
        "persistence.persistentVolumeClaim.chartmuseum.size=5Gi",
        "persistence.persistentVolumeClaim.chartmuseum.storageClass=gluster-heketi",
        "persistence.persistentVolumeClaim.database.size=5Gi",
        "persistence.persistentVolumeClaim.database.storageClass=local-storage",
        "persistence.persistentVolumeClaim.redis.storageClass=local-storage",
        "persistence.persistentVolumeClaim.jobservice.storageClass=gluster-heketi",
        "persistence.persistentVolumeClaim.trivy.storageClass=gluster-heketi",
        "expose.type=ingress",
        "expose.ingress.annotations.\"kubernetes\\.io/ingress\\.class\"=nginx",
        "externalURL=https://{{componentName}}.{{baseDomain}}",
        "expose.ingress.hosts.core={{componentName}}.{{baseDomain}}",
        "expose.ingress.hosts.notary=notary.{{baseDomain}}",
        "expose.tls.enabled=true",
        "expose.tls.certSource=secret",
        "expose.tls.caBundleSecretName=kx.as.code-wildcard-cert",
        "expose.tls.caSecretName=kx.as.code-wildcard-cert",
        "expose.tls.secretName=kx.as.code-wildcard-cert",
        "expose.tls.notarySecretName=kx.as.code-wildcard-cert",
        "harborAdminPassword=\"{{harborAdminPassword}}\"",
        "expose.ingress.annotations.\"nginx\\.ingress\\.kubernetes\\.io/proxy-body-size\"=\"10000m\"",
        "imagePullSecrets[0].name={{defaultDockerHubSecret}}",
        "logLevel=debug"
      ]
    },
    "categories": ["docker-registry", "helm-repository"],
    "urls": [
      {
        "url": "https://{{componentName}}.{{baseDomain}}",
        "healthchecks": {
          "liveliness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          },
          "readiness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          }
        }
      }
    ],
    "Description": "Harbor Description",
    "shortcut_text": "Harbor",
    "shortcut_icon": "harbor.png",
    "swagger_docs_url": "https://{{componentName}}.{{baseDomain}}/devcenter-api-2.0",
    "api_docs_url": "https://goharbor.io/docs/2.1.0/build-customize-contribute/configure-swagger/",
    "vendor_docs_url": "https://goharbor.io/docs",
    "pre_install_scripts": ["createSecret.sh", "createHarborAdminPassword.sh"],
    "post_install_scripts": [
      "createProjects.sh",
      "createRobotAccounts.sh",
      "createGitlabGroupVariables.sh",
      "deployOidc.sh"
    ]
  },
  {
    "name": "argocd",
    "namespace": "argocd",
    "installation_type": "helm",
    "installation_group_folder": "cicd",
    "environment_variables": {
      "imageTag": "v2.1.2"
    },
    "minimum_resources": {
      "cpu": "1000",
      "memory": "3000"
    },
    "helm_params": {
      "repository_url": "https://argoproj.github.io/argo-helm",
      "repository_name": "argo/argo-cd",
      "helm_version": "3.22.1",
      "set_key_values": [
        "global.image.tag={{imageTag}}",
        "installCRDs=false",
        "configs.secret.argocdServerAdminPassword='{{argoCdAdminPassword}}'",
        "controller.clusterAdminAccess.enabled=true",
        "server.clusterAdminAccess.enabled=true",
        "server.extraArgs[0]=--insecure"
      ]
    },
    "categories": ["gitops"],
    "urls": [
      {
        "url": "https://{{componentName}}.{{baseDomain}}",
        "healthchecks": {
          "liveliness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          },
          "readiness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          }
        }
      }
    ],
    "Description": "ArgoCD Description",
    "shortcut_text": "Argo CD",
    "shortcut_icon": "argocd.png",
    "swagger_docs_url": "https://{{componentName}}.{{baseDomain}}/swagger-ui",
    "api_docs_url": "https://argoproj.github.io/argo-cd/developer-guide/api-docs/",
    "vendor_docs_url": "https://argoproj.github.io/argo-cd/",
    "pre_install_scripts": [
      "installArgoCdCli.sh",
      "createArgoCdPassword.sh",
      "createIngressObjects.sh"
    ],
    "post_install_scripts": ["deployOauth2.sh"]
  },
  {
    "name": "teamcity",
    "namespace": "teamcity",
    "installation_type": "argocd",
    "installation_group_folder": "cicd",
    "environment_variables": {
      "teamcityVersion": "2020.2"
    },
    "argocd_params": {
      "repository": "{{gitUrl}}/devops/teamcity.git",
      "path": ".",
      "dest_server": "https://kubernetes.default.svc",
      "dest_namespace": "teamcity",
      "sync_policy": "automated",
      "auto_prune": true,
      "self_heal": true
    },
    "categories": ["cicd"],
    "urls": [
      {
        "url": "https://{{componentName}}.{{baseDomain}}",
        "healthchecks": {
          "liveliness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          },
          "readiness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          }
        }
      }
    ],
    "Description": "Teamcity CICD",
    "shortcut_text": "Teamcity",
    "shortcut_icon": "teamcity.png",
    "pre_install_scripts": [
      "createGitProject.sh",
      "populateGitProject.sh",
      "rebuildDockerImage.sh"
    ],
    "post_install_scripts": []
  },
  {
    "name": "artifactory-oss",
    "namespace": "artifactory",
    "installation_type": "script",
    "installation_group_folder": "cicd",
    "environment_variables": {
      "appVersion": "7.27.3",
      "chartGitCommitId": "2ce06f3ba208fefad136d43c171050328aa93e23"
    },
    "categories": ["artifact-repository", "docker-registry"],
    "urls": [
      {
        "url": "https://{{componentName}}.{{baseDomain}}",
        "healthchecks": {
          "liveliness": {
            "http_path": "/artifactory/api/system/ping",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "OK",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          },
          "readiness": {
            "http_path": "/artifactory/api/system/ping",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "OK",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          }
        }
      }
    ],
    "Description": "Artifactory Description",
    "shortcut_text": "Artifactory OSS",
    "shortcut_icon": "artifactory.png",
    "api_docs_type": "web",
    "api_docs_url": "https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API",
    "vendor_docs_url": "https://www.jfrog.com/confluence/display/JFROG/JFrog+Artifactory",
    "install_scripts": ["installArtifactoryOss.sh"],
    "pre_install_scripts": ["createPostgresPassword.sh"],
    "post_install_scripts": [
      "configureJfrogArtifactory.sh",
      "changeAdminPassword.sh"
    ]
  },
  {
    "name": "gitea",
    "namespace": "gitea",
    "installation_type": "helm",
    "installation_group_folder": "cicd",
    "helm_params": {
      "repository_url": "https://dl.gitea.io/charts/",
      "repository_name": "gitea-charts/gitea",
      "set_key_values": [
        "postgresql.global.postgresql.postgresqlDatabase=gitea",
        "postgresql.global.postgresql.postgresqlUsername=gitea",
        "postgresql.global.postgresql.postgresqlPassword={{postgresqlPassword}}",
        "postgresql.global.postgresql.servicePort=5432",
        "postgresql.persistence.size=1Gi",
        "ingress.enabled=true",
        "ingress.hosts[0]={{componentName}}.{{baseDomain}}",
        "ingress.tls[0].hosts[0]={{componentName}}.{{baseDomain}}"
      ]
    },
    "categories": ["git-repository", "oauth-provider"],
    "urls": [
      {
        "url": "https://{{componentName}}.{{baseDomain}}",
        "healthchecks": {
          "liveliness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          },
          "readiness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          }
        }
      }
    ],
    "Description": "Gitea Description",
    "shortcut_text": "Gitea",
    "shortcut_icon": "gitea.png",
    "swagger_docs_url": "https://{{componentName}}.{{baseDomain}}/devcenter-api-2.0",
    "api_docs_url": "https://docs.gitea.io/en-us/api-usage/",
    "vendor_docs_url": "https://docs.gitea.io/",
    "pre_install_scripts": ["createPostgresPassword.sh"],
    "post_install_scripts": []
  },
  {
    "name": "consul",
    "namespace": "vault",
    "installation_type": "helm",
    "installation_group_folder": "cicd",
    "helm_params": {
      "repository_url": "https://helm.releases.hashicorp.com",
      "repository_name": "hashicorp/consul",
      "helm_version": "",
      "set_key_values": []
    },
    "categories": ["service-discovery", "service-mesh"],
    "urls": [
      {
        "url": "https://{{componentName}}.{{baseDomain}}",
        "healthchecks": {
          "liveliness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          },
          "readiness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          }
        }
      }
    ],
    "Description": "HashiCorp Consul Service Discovery",
    "shortcut_text": "HashiCorp Consul",
    "shortcut_icon": "consul.png",
    "api_docs_type": "web",
    "api_docs_url": "",
    "vendor_docs_url": "",
    "pre_install_scripts": ["configureIngress.sh"],
    "post_install_scripts": []
  },
  {
    "name": "gitlab-ce",
    "namespace": "gitlab-ce",
    "installation_type": "helm",
    "installation_group_folder": "cicd",
    "minimum_resources": {
      "cpu": "1000",
      "memory": "3000"
    },
    "environment_variables": {
      "gitabRunnerVersion": "v13.4.1",
      "s3BucketsToCreate": "gitlab-artifacts-storage;gitlab-backup-storage;gitlab-lfs-storage;gitlab-packages-storage;gitlab-registry-storage;gitlab-uploads-storage;runner-cache"
    },
    "helm_params": {
      "repository_url": "https://charts.gitlab.io/",
      "repository_name": "gitlab/gitlab",
      "helm_version": "",
      "set_key_values": [
        "global.hosts.domain={{baseDomain}}",
        "global.hosts.externalIP={{nginxIngressIp}}",
        "externalUrl=https://gitlab.{{baseDomain}}",
        "global.edition=ce",
        "prometheus.install=false",
        "global.smtp.enabled=false",
        "gitlab-runner.install=true",
        "gitlab-runner.image={{dockerRegistryDomain}}/devops/gitlab-runner:alpine-{{gitabRunnerVersion}}",
        "gitlab-runner.runners.privileged=true",
        "gitlab-runner.certsSecretName=kx.as.code-wildcard-cert",
        "global.ingress.class=nginx",
        "global.ingress.enabled=true",
        "global.ingress.tls.enabled=true",
        "gitlab.webservice.ingress.tls.secretName=kx.as.code-wildcard-cert",
        "nginx-ingress.enabled=false",
        "global.certmanager.install=false",
        "certmanager.install=false",
        "global.ingress.configureCertmanager=false",
        "global.hosts.https=true",
        "global.minio.enabled=false",
        "registry.enabled=false",
        "global.appConfig.lfs.bucket=gitlab-lfs-storage",
        "global.appConfig.lfs.connection.secret=object-storage",
        "global.appConfig.lfs.connection.key=connection",
        "global.appConfig.artifacts.bucket=gitlab-artifacts-storage",
        "global.appConfig.artifacts.connection.secret=object-storage",
        "global.appConfig.artifacts.connection.key=connection",
        "global.appConfig.uploads.connection.secret=object-storage",
        "global.appConfig.uploads.bucket=gitlab-uploads-storage",
        "global.appConfig.uploads.connection.key=connection",
        "global.appConfig.packages.bucket=gitlab-packages-storage",
        "global.appConfig.packages.connection.secret=object-storage",
        "global.appConfig.packages.connection.key=connection",
        "global.appConfig.externalDiffs.bucket=gitlab-externaldiffs-storage",
        "global.appConfig.externalDiffs.connection.secret=object-storage",
        "global.appConfig.externalDiffs.connection.key=connection",
        "global.appConfig.pseudonymizer.bucket=gitlab-pseudonymizer-storage",
        "global.appConfig.pseudonymizer.connection.secret=object-storage",
        "global.appConfig.pseudonymizer.connection.key=connection",
        "redis.resources.requests.cpu=10m",
        "redis.resources.requests.memory=64Mi",
        "global.rails.bootsnap.enabled=false",
        "gitlab.webservice.minReplicas=1",
        "gitlab.webservice.maxReplicas=1",
        "gitlab.webservice.resources.limits.memory=3G",
        "gitlab.webservice.requests.cpu=100m",
        "gitlab.webservice.requests.memory=900M",
        "gitlab.workhorse.resources.limits.memory=100M",
        "gitlab.workhorse.requests.cpu=10m",
        "gitlab.workhorse.requests.memory=10M",
        "gitlab.sidekiq.minReplicas=1",
        "gitlab.sidekiq.maxReplicas=1",
        "gitlab.sidekiq.resources.limits.memory=3G",
        "gitlab.sidekiq.requests.cpu=50m",
        "gitlab.sidekiq.requests.memory=625M",
        "gitlab.gitlab-shell.minReplicas=1",
        "gitlab.gitlab-shell.maxReplicas=1",
        "gitlab.task-runner.backups.objectStorage.config.secret=s3cmd-config",
        "gitlab.task-runner.backups.objectStorage.config.key=config",
        "gitlab.gitaly.persistence.storageClass=gluster-heketi",
        "gitlab.gitaly.persistence.size=10Gi",
        "postgresql.persistence.storageClass=local-storage",
        "postgresql.persistence.size=5Gi",
        "redis.master.persistence.storageClass=local-storage",
        "redis.master.persistence.size=5Gi",
        "global.certificates.customCAs[0].secret=intermediate-ca",
        "global.certificates.customCAs[1].secret=root-ca",
        "global.certificates.customCAs[2].secret=server-crt",
        "global.appConfig.omniauth.providers[0].secret=sso-provider",
        "global.appConfig.omniauth.enabled=true"
      ]
    },
    "categories": ["git-repository", "docker-registry", "cicd"],
    "urls": [
      {
        "url": "https://gitlab.{{baseDomain}}",
        "healthchecks": {
          "liveliness": {
            "http_path": "/-/readiness",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": ".status",
              "json_value": "ok"
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          },
          "readiness": {
            "http_path": "/-/readiness",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": ".status",
              "json_value": "ok"
            }
          }
        }
      }
    ],
    "Description": "Gitlab CE Git Repository and CICD",
    "shortcut_text": "Gitlab CE",
    "shortcut_icon": "gitlab.png",
    "api_docs_type": "help",
    "api_docs_url": "https://gitlab.{{baseDomain}}/help/api/api_resources.md",
    "vendor_docs_url": "https://docs.gitlab.com/ce/",
    "pre_install_scripts": [
      "getVariables.sh",
      "createS3Buckets.sh",
      "createSecrets.sh",
      "createOAuth.sh"
    ],
    "post_install_scripts": [
      "createLoginToken.sh",
      "createUsers.sh",
      "createGroups.sh",
      "createProjects.sh",
      "mapUsersToGroups.sh",
      "populateDemoProjects.sh",
      "createGroupVariables.sh"
    ]
  },
  {
    "name": "jenkins",
    "namespace": "jenkins",
    "installation_type": "helm",
    "installation_group_folder": "cicd",
    "helm_params": {
      "repository_url": "https://charts.jenkins.io",
      "repository_name": "jenkins/jenkins",
      "set_key_values": []
    },
    "categories": ["cicd"],
    "urls": [
      {
        "url": "https://{{componentName}}.{{baseDomain}}",
        "healthchecks": {
          "liveliness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          },
          "readiness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          }
        }
      }
    ],
    "Description": "Jenkins Description",
    "shortcut_text": "Jenkins",
    "shortcut_icon": "jenkins.png",
    "api_docs_url": "https://www.jenkins.io/doc/book/using/remote-access-api/",
    "vendor_docs_url": "https://www.jenkins.io/doc/",
    "pre_install_scripts": ["createSecret.sh"],
    "post_install_scripts": []
  },
  {
    "name": "gitlab-runner",
    "namespace": "gitlab-ce",
    "installation_type": "script",
    "installation_group_folder": "cicd",
    "install_scripts": ["buildAndPushCustomImages.sh"],
    "environment_variables": {
      "gitlabDindImageVersion": "19.03.13-dind",
      "gitabRunnerVersion": "v13.4.1"
    },
    "categories": ["cicd"],
    "Description": "Customized Gitlab Runner for Gitlab-CE",
    "pre_install_scripts": [],
    "post_install_scripts": []
  },
  {
    "name": "elastic-filebeat",
    "namespace": "elastic-stack",
    "installation_type": "helm",
    "installation_group_folder": "monitoring",
    "environment_variables": {
      "elasticVersion": "7.12.0"
    },
    "helm_params": {
      "repository_url": "https://helm.elastic.co",
      "repository_name": "elastic/filebeat",
      "helm_version": "",
      "set_key_values": []
    },
    "categories": ["monitoring", "log-harvester"],
    "urls": [
      {
        "url": "",
        "healthchecks": {
          "liveliness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          },
          "readiness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          }
        }
      }
    ],
    "Description": "Filebeat Description",
    "shortcut_text": "",
    "shortcut_icon": "",
    "pre_install_scripts": [],
    "post_install_scripts": []
  },
  {
    "name": "loki",
    "namespace": "loki",
    "installation_type": "helm",
    "installation_group_folder": "monitoring",
    "environment_variables": {
      "lokiVersion": "2.2.0"
    },
    "helm_params": {
      "repository_url": "https://grafana.github.io/helm-charts",
      "repository_name": "grafana/loki-stack",
      "helm_version": "",
      "set_key_values": [
        "promtail.enabled=true",
        "grafana.enabled=false",
        "prometheus.enabled=false",
        "prometheus.alertmanager.persistentVolume.enabled=false",
        "prometheus.server.persistentVolume.enabled=false"
      ]
    },
    "categories": ["monitoring", "datastore"],
    "urls": [
      {
        "url": "",
        "healthchecks": {
          "liveliness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          },
          "readiness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          }
        }
      }
    ],
    "Description": "Loki Description",
    "shortcut_text": "",
    "shortcut_icon": "",
    "pre_install_scripts": ["getGrafanaAccessKey.sh"],
    "post_install_scripts": ["configureLokiWithGrafana.sh"]
  },
  {
    "name": "elastic-heartbeat",
    "namespace": "elastic-stack",
    "installation_type": "script",
    "installation_group_folder": "monitoring",
    "environment_variables": {
      "elasticVersion": "7.12.0"
    },
    "categories": ["monitoring"],
    "Description": "Heartbeat Description",
    "shortcut_text": "",
    "shortcut_icon": "",
    "install_scripts": ["installHeartbeat.sh"],
    "pre_install_scripts": ["createKxCertsSecret.sh", "createConfigMap.sh"],
    "post_install_scripts": []
  },
  {
    "name": "elastic-elasticsearch",
    "namespace": "elastic-stack",
    "installation_type": "helm",
    "installation_group_folder": "monitoring",
    "environment_variables": {
      "elasticVersion": "7.12.0"
    },
    "helm_params": {
      "repository_url": "https://helm.elastic.co",
      "repository_name": "elastic/elasticsearch",
      "helm_version": "",
      "set_key_values": [
        "replicas=1",
        "volumeClaimTemplate.storageClassName=local-storage",
        "volumeClaimTemplate.resources.requests.storage=1Gi"
      ]
    },
    "categories": ["monitoring", "datastore", "search-engine"],
    "urls": [
      {
        "url": "https://{{componentName}}.{{baseDomain}}",
        "healthchecks": {
          "liveliness": {
            "http_path": "/",
            "http_auth_required": true,
            "http_auth_secret": {
              "secret_name": "elastic-credentials",
              "username_field": "username",
              "password_field": "password"
            },
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          },
          "readiness": {
            "http_path": "/",
            "http_auth_required": true,
            "http_auth_secret": {
              "secret_name": "elastic-credentials",
              "username_field": "username",
              "password_field": "password"
            },
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          }
        }
      }
    ],
    "Description": "Elasticsearch Description",
    "shortcut_text": "Elasticsearch",
    "shortcut_icon": "elasticsearch.png",
    "pre_install_scripts": ["createSecret.sh"],
    "post_install_scripts": []
  },
  {
    "name": "grafana",
    "namespace": "monitoring",
    "installation_type": "helm",
    "installation_group_folder": "monitoring",
    "environment_variables": {
      "grafanaVersion": "8.1.2"
    },
    "helm_params": {
      "repository_url": "https://grafana.github.io/helm-charts",
      "repository_name": "grafana/grafana",
      "helm_version": "6.16.4",
      "set_key_values": [
        "image.tag={{grafanaVersion}}",
        "ingress.enabled=true",
        "ingress.annotations.\"kubernetes\\.io/ingress\\.class\"=nginx",
        "ingress.hosts[0]={{componentName}}.{{baseDomain}}",
        "ingress.tls[0].hosts[0]={{componentName}}.{{baseDomain}}",
        "persistence.enabled=true",
        "persistence.size=4Gi",
        "persistence.storageClassName=gluster-heketi",
        "admin.userKey=admin-user",
        "admin.passwordKey=admin-password",
        "admin.existingSecret=grafana-admin-credentials",
        "datasources.\"datasources\\.yaml\".datasources[0].name=Prometheus",
        "datasources.\"datasources\\.yaml\".datasources[0].type=prometheus",
        "datasources.\"datasources\\.yaml\".datasources[0].url=http://prometheus-server.monitoring:80",
        "datasources.\"datasources\\.yaml\".datasources[0].access=proxy",
        "datasources.\"datasources\\.yaml\".datasources[0].isDefault=true",
        "datasources.\"datasources\\.yaml\".datasources[1].name=Graphite",
        "datasources.\"datasources\\.yaml\".datasources[1].type=graphite",
        "datasources.\"datasources\\.yaml\".datasources[1].url=http://graphite:8080",
        "datasources.\"datasources\\.yaml\".datasources[1].access=proxy",
        "datasources.\"datasources\\.yaml\".datasources[1].isDefault=false",
        "dashboardProviders.\"dashboardproviders\\.yaml\".apiVersion=1",
        "dashboardProviders.\"dashboardproviders\\.yaml\".providers[0].name=default",
        "dashboardProviders.\"dashboardproviders\\.yaml\".providers[0].orgId=1",
        "dashboardProviders.\"dashboardproviders\\.yaml\".providers[0].type=file",
        "dashboardProviders.\"dashboardproviders\\.yaml\".providers[0].disableDeletion=false",
        "dashboardProviders.\"dashboardproviders\\.yaml\".providers[0].editable=true",
        "dashboardProviders.\"dashboardproviders\\.yaml\".providers[0].options.path=/var/lib/grafana/dashboards/default",
        "dashboards.default.node-exporter.gnetId=1860",
        "dashboards.default.node-exporter.revision=21",
        "dashboards.default.node-exporter.datasource=Prometheus",
        "notifiers.\"notifiers\\.yaml\".notifiers[0].name=slack-notifier",
        "notifiers.\"notifiers\\.yaml\".notifiers[0].type=slack",
        "notifiers.\"notifiers\\.yaml\".notifiers[0].uid=slack",
        "notifiers.\"notifiers\\.yaml\".notifiers[0].settings.url=http://mattermost-team-edition.gitlab-ce:8065/hooks/{{monitoringWebhookId}}",
        "plugins[0]=grafana-image-renderer",
        "plugins[1]=grafana-piechart-panel"
      ]
    },
    "categories": ["visualization", "monitoring"],
    "urls": [
      {
        "url": "https://{{componentName}}.{{baseDomain}}",
        "healthchecks": {
          "liveliness": {
            "http_path": "/api/health",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          },
          "readiness": {
            "http_path": "/api/health",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          }
        }
      }
    ],
    "Description": "Grafana Description",
    "shortcut_text": "Grafana",
    "shortcut_icon": "grafana.png",
    "api_docs_type": "web",
    "api_docs_url": "https://grafana.com/docs/grafana/latest/http_api/curl-examples/?src=grafana_gettingstarted",
    "vendor_docs_url": "https://grafana.com/docs/",
    "pre_install_scripts": [
      "getMinIoAccessKey.sh",
      "createAdminCredentialsSecret.sh",
      "uploadCaConfigMap.sh",
      "configureOauthLogin.sh",
      "getMattermostApplicationId.sh"
    ],
    "post_install_scripts": []
  },
  {
    "name": "elastic-metricbeat",
    "namespace": "elastic-stack",
    "installation_type": "helm",
    "installation_group_folder": "monitoring",
    "environment_variables": {
      "elasticVersion": "7.12.0"
    },
    "helm_params": {
      "repository_url": "https://helm.elastic.co",
      "repository_name": "elastic/metricbeat",
      "helm_version": "",
      "set_key_values": []
    },
    "categories": ["monitoring", "metrics"],
    "urls": [
      {
        "url": "",
        "healthchecks": {
          "liveliness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          },
          "readiness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          }
        }
      }
    ],
    "Description": "Metricbeat Description",
    "shortcut_text": "",
    "shortcut_icon": "",
    "pre_install_scripts": [],
    "post_install_scripts": []
  },
  {
    "name": "elastic-packetbeat",
    "namespace": "elastic-stack",
    "installation_type": "script",
    "installation_group_folder": "monitoring",
    "environment_variables": {
      "elasticVersion": "7.12.0"
    },
    "categories": ["monitoring"],
    "Description": "Packetbeat Description",
    "shortcut_text": "",
    "shortcut_icon": "",
    "install_scripts": ["installPacketbeat.sh"],
    "pre_install_scripts": [],
    "post_install_scripts": []
  },
  {
    "metadata": {}
  },
  {
    "name": "grafana-image-renderer",
    "namespace": "monitoring",
    "installation_type": "argocd",
    "installation_group_folder": "monitoring",
    "argocd_params": {
      "repository": "{{gitUrl}}/devops/grafana_image_renderer.git",
      "path": ".",
      "dest_server": "https://kubernetes.default.svc",
      "dest_namespace": "{{namespace}}",
      "sync_policy": "automated",
      "auto_prune": true,
      "self_heal": true
    },
    "categories": ["visualization", "monitoring"],
    "urls": [
      {
        "url": "",
        "healthchecks": {
          "liveliness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          },
          "readiness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          }
        }
      }
    ],
    "Description": "Grafana Image Renderer Description",
    "shortcut_text": "",
    "shortcut_icon": "",
    "pre_install_scripts": ["createGitProject.sh", "populateGitProject.sh"],
    "post_install_scripts": []
  },
  {
    "name": "prometheus",
    "namespace": "monitoring",
    "installation_type": "helm",
    "installation_group_folder": "monitoring",
    "helm_params": {
      "repository_url": "",
      "repository_name": "stable/prometheus",
      "helm_version": "",
      "set_key_values": [
        "alertmanager.persistentVolume.enabled=true",
        "alertmanager.persistentVolume.storageClass=gluster-heketi",
        "alertmanager.ingress.enabled=true",
        "alertmanager.ingress.hosts[0]=alertmanager.{{baseDomain}}",
        "alertmanager.ingress.tls[0].hosts[0]=alertmanager.{{baseDomain}}",
        "server.persistentVolume.enabled=true",
        "server.persistentVolume.storageClass=local-storage",
        "server.ingress.enabled=true",
        "server.ingress.hosts[0]={{componentName}}.{{baseDomain}}",
        "server.ingress.tls[0].hosts[0]={{componentName}}.{{baseDomain}}"
      ]
    },
    "categories": ["monitoring"],
    "urls": [
      {
        "url": "https://{{componentName}}.{{baseDomain}}",
        "healthchecks": {
          "liveliness": {
            "http_path": "/-/ready",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          },
          "readiness": {
            "http_path": "/-/ready",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          }
        }
      }
    ],
    "Descriptions": "Prometheus Description",
    "shortcut_text": "Prometheus",
    "shortcut_icon": "prometheus.png",
    "api_docs_url": "https://prometheus.io/docs/prometheus/latest/querying/api/",
    "vendor_docs_url": "https://prometheus.io/docs",
    "pre_install_scripts": ["getMattermostIntegrationId.sh"],
    "post_install_scripts": []
  },
  {
    "name": "elastic-kibana",
    "namespace": "elastic-stack",
    "installation_type": "helm",
    "installation_group_folder": "monitoring",
    "environment_variables": {
      "elasticVersion": "7.12.0"
    },
    "helm_params": {
      "repository_url": "https://helm.elastic.co",
      "repository_name": "elastic/kibana",
      "helm_version": "",
      "set_key_values": []
    },
    "categories": ["monitoring", "visualization"],
    "urls": [
      {
        "url": "https://{{componentName}}.{{baseDomain}}",
        "healthchecks": {
          "liveliness": {
            "http_path": "/status",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          },
          "readiness": {
            "http_path": "/status",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          }
        }
      }
    ],
    "Description": "Elastic-Stack Description",
    "shortcut_text": "Kibana",
    "shortcut_icon": "kibana.png",
    "pre_install_scripts": ["generateEncryptionKey.sh"],
    "post_install_scripts": []
  },
  {
    "name": "graphite",
    "namespace": "monitoring",
    "installation_type": "helm",
    "installation_group_folder": "monitoring",
    "helm_params": {
      "repository_url": "https://kiwigrid.github.io",
      "repository_name": "kiwigrid/graphite",
      "helm_version": "",
      "set_key_values": [
        "persistence.enabled=true",
        "persistence.storageClass=local-storage",
        "persistence.size=1Gi",
        "ingress.enabled=true",
        "ingress.hosts[0]={{componentName}}.{{baseDomain}}",
        "ingress.tls[0].hosts[0]={{componentName}}.{{baseDomain}}",
        "ingress.annotations.\"nginx\\.ingress\\.kubernetes\\.io/proxy-body-size\"=\"100m\""
      ]
    },
    "categories": ["monitoring", "cicd"],
    "urls": [
      {
        "url": "https://{{componentName}}.{{baseDomain}}",
        "healthchecks": {
          "liveliness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          },
          "readiness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          }
        }
      }
    ],
    "Description": "Graphite for collecting SiteSpeed.io Metrics",
    "shortcut_text": "Graphite",
    "shortcut_icon": "graphite.png",
    "api_docs_type": "web",
    "api_docs_url": "https://graphite.readthedocs.io/en/1.1.7/render_api.html",
    "vendor_docs_url": "https://graphite.readthedocs.io/",
    "pre_install_scripts": [],
    "post_install_scripts": []
  },
  {
    "name": "elastic-auditbeat",
    "namespace": "elastic-stack",
    "installation_type": "script",
    "installation_group_folder": "monitoring",
    "environment_variables": {
      "elasticVersion": "7.12.0"
    },
    "categories": ["monitoring"],
    "Description": "auditbeat Description",
    "shortcut_text": "",
    "shortcut_icon": "",
    "install_scripts": ["installAuditbeat.sh"],
    "pre_install_scripts": [],
    "post_install_scripts": []
  },
  {
    "name": "selenium",
    "namespace": "selenium",
    "installation_type": "helm",
    "installation_group_folder": "test_automation",
    "helm_params": {
      "repository_url": "https://charts.helm.sh/stable",
      "repository_name": "stable/selenium",
      "helm_version": "",
      "set_key_values": [
        "chromeDebug.replicas=1",
        "chromeDebug.enabled=true",
        "firefox.replicas=1",
        "firefox.enabled=true",
        "hub.ingress.enabled=true",
        "hub.ingress.hosts[0]={{componentName}}.{{baseDomain}}",
        "hub.ingress.tls[0].hosts[0]={{componentName}}.{{baseDomain}}"
      ]
    },
    "categories": ["test-automation"],
    "urls": [
      {
        "url": "https://{{componentName}}.{{baseDomain}}",
        "healthchecks": {
          "liveliness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          },
          "readiness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          }
        }
      }
    ],
    "Description": "Selenium Hub Description",
    "shortcut_text": "Selenium Hub",
    "shortcut_icon": "selenium.png",
    "pre_install_scripts": [],
    "post_install_scripts": []
  },
  {
    "name": "sonarqube",
    "namespace": "sonarqube",
    "installation_type": "helm",
    "installation_group_folder": "cicd",
    "minimum_resources": {
      "cpu": "1000",
      "memory": "3000"
    },
    "environment_variables": {
      "imageTag": "9.1.0-community"
    },
    "helm_params": {
      "repository_url": "https://SonarSource.github.io/helm-chart-sonarqube",
      "repository_name": "sonarqube/sonarqube",
      "helm_version": "1.1.8",
      "set_key_values": [
        "image.tag={{imageTag}}",
        "replicaCount=1",
        "ingress.enabled=true",
        "ingress.hosts[0].name={{componentName}}.{{baseDomain}}",
        "ingress.hosts[0].path=/",
        "ingress.tls[0].hosts[0]={{componentName}}.{{baseDomain}}",
        "ingress.ingressClassName=nginx",
        "persistence.enabled=true",
        "persistence.storageClass=local-storage",
        "persistence.size=1Gi",
        "postgresql.enabled=true",
        "postgresql.postgresqlUsername=sonarqube",
        "postgresql.postgresqlPassword={{postgresqlPassword}}",
        "postgresql.postgresqlDatabase=sonarqube",
        "postgresql.service.port=5432",
        "postgresql.global.persistence.storageClass=local-storage",
        "postgresql.persistence.enabled=true",
        "postgresql.persistence.storageClass=local-storage",
        "postgresql.persistence.size=1Gi",
        "caCerts.secret=kx-ca-certs"
      ]
    },
    "categories": ["code-quality"],
    "urls": [
      {
        "url": "https://{{componentName}}.{{baseDomain}}",
        "healthchecks": {
          "liveliness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          },
          "readiness": {
            "http_path": "/",
            "http_auth_required": false,
            "expected_http_response_code": "200",
            "expected_http_response_string": "",
            "expected_json_response": {
              "json_path": "",
              "json_value": ""
            },
            "health_shell_check_command": "",
            "expected_shell_check_command_response": ""
          }
        }
      }
    ],
    "Description": "Sonarqube Description",
    "shortcut_text": "Sonarqube",
    "shortcut_icon": "sonarqube.png",
    "api_docs_type": "help",
    "api_docs_url": "https://{{componentName}}.{{baseDomain}}/web_api",
    "vendor_docs_url": "https://docs.sonarqube.org/",
    "pre_install_scripts": [
      "createCaSecret.sh",
      "createPostgresPassword.sh",
      "createOauthIntegration.sh"
    ],
    "post_install_scripts": [
      "createGitlabOauthApplication.sh",
      "configureSonarQube.sh"
    ]
  }
]
