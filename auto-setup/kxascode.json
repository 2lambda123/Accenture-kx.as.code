{
  "kubernetes_core_groups": [
    {
      "group1": [
      "kubernetes_tools",
      "kubernetes_base_services",
      "calico_network",
      "cfssl_certificate_authority",
      "metallb_loadbalancer",
      "cert_manager",
      "glusterfs_storage",
      "local_storage",
      "nginx_ingress_controller",
      "metrics_server",
      "kubernetes_dashboard"
    ]
  }
],
  "kx_as_code_groups": [
    {
      "group1": [
        "kx_as_code_docs",
        "kx_as_code_techradar"
      ],
      "dependencies": [
        "git_repository",
        "docker_registry"
      ]
    }
  ],
  "cicd_groups": [
    {
        "group1": [
          {
            "component": "minio_s3",
            "categories": [
              "s3-storage"
            ]
          },
          {
            "component": "gitlab_ce",
            "categories": [
              "git-repository",
              "docker-registry",
              "cicd",
              "oauth-provider"
            ]
          },
          {
            "component": "mattermost",
            "categories": [
              "chatops",
              "collaboration"
            ]
          },
          {
            "component": "harbor",
            "categories": [
              "docker-registry",
              "helm-repository"
            ]
          },
          {
            "component": "argocd",
            "categories": [
              "gitops"
            ]
          }
        ],
        "group2": [
          {
            "component": "gitea",
            "categories": [
              "git-repository",
              "oauth-provider"
            ]
          },
          {
            "component": "jenkins",
            "categories": [
              "cicd"
            ]
          },
          {
            "component": "rocketchat",
            "categories": [
              "chatops",
              "collaboration"
            ]
          },
          {
            "component": "nexus3",
            "categories": [
              "artifact-repository",
              "docker-registry"
            ]
          },
          {
            "component": "docker_registry",
            "categories": [
              "docker-registry"
            ]
          }
        ]
      }
  ],
  "monitoring_groups": [
    {
      "group1": [
        {
          "component": "prometheus",
          "categories": [
            "monitoring"
          ]
        },
        {
          "component": "grafana",
          "categories": [
            "visualization",
            "monitoring"
          ]
        },
        {
          "component": "elastic_stack",
          "categories": [
            "monitoring",
            "visualization"
          ]
        }
      ]
    }
  ],
    "test_automation_groups": [
      {
        "group1": [
          {
            "component": "sonarqube",
            "categories": [
              "code-quality"
            ]
          },
          {
            "component": "selenium",
            "categories": [
              "test-automation"
            ]
          }
        ]
      }
    ],
    "collaboration_groups": [
      {
        "group1": [
        {
          "component": "jira",
          "categories": [
            "collaboration",
            "agile-management"
          ]
        },
        {
          "component": "confluence",
          "categories": [
            "collaboration",
            "wiki"
          ]
        },
        {
          "hard_dependencies": [
            {
            "app": "argocd",
            "why": "...."
            }
          ],
          "soft_dependencies": [
            {
            "app": "s3",
            "why": "...."
            }
          ]
        }
      ]
    }
  ],
    "security_groups": [
      {
        "group1": [
          {
            "component": "sysdig_falco",
            "categories": [
              "runtime-security"
            ]
          },
          {
            "component": "consul",
            "categories": [
              "service-discovery"
            ]
          },
          {
            "component": "vault",
            "categories": [
              "credential-store"
            ]
          }
        ]
      }
    ],
  "metadata": {
    "glusterfs_storage": {
      "applications": [
        {
          "name": "glusterfs-storage",
          "Description": "GlusterFS Network Storage (slow)",
          "namespace": "kube-system",
          "installation_type": "script",
          "installation_group_folder": "kubernetes_core",
          "install_scripts": [
            "installGlusterFs.sh"
          ],
          "pre_install_scripts": [],
          "post_install_scripts": []
        }
      ]
    },
    "local_storage": {
      "applications": [
        {
          "name": "local-storage",
          "Description": "Local Storage (fast)",
          "namespace": "kube-system",
          "installation_type": "script",
          "installation_group_folder": "kubernetes_core",
          "install_scripts": [
            "installLocalStorage.sh"
          ],
          "pre_install_scripts": [],
          "post_install_scripts": []
          }
      ]
    },
    "cfssl_certificate_authority": {
      "applications": [
        {
          "name": "cfssl-certificate-authority",
          "Description": "CFSSL Certificate Authority",
          "namespace": "kube-system",
          "installation_type": "script",
          "installation_group_folder": "kubernetes_core",
          "install_scripts": [
            "installCfsslCertificateAuthority.sh"
          ],
          "pre_install_scripts": [],
          "post_install_scripts": []
        }
      ]
    },
    "kubernetes_tools": {
      "applications": [
        {
          "name": "kubernetes-tools",
          "Description": "Kubernetes Tools",
          "namespace": "kube-system",
          "installation_type": "script",
          "installation_group_folder": "kubernetes_core",
          "install_scripts": [
            "installKubernetesTools.sh"
          ],
          "pre_install_scripts": [],
          "post_install_scripts": []
        }
      ]
    },
    "kubernetes_base_services": {
      "applications": [
        {
          "name": "kubernetes-base-services",
          "Description": "Kubernetes Base Services",
          "namespace": "kube-system",
          "installation_type": "script",
          "installation_group_folder": "kubernetes_core",
          "install_scripts": [
            "installKubernetesBaseServices.sh"
          ],
          "pre_install_scripts": [],
          "post_install_scripts": [
            "configureCoreDnsWithKxAsCodeDnsServer.sh",
            "enableWorkloadsOnMaster.sh"
          ]
        }
      ]
    },
    "calico_network": {
      "applications": [
        {
          "name": "calico-network",
          "Description": "Calico Network",
          "namespace": "kube-system",
          "installation_type": "script",
          "installation_group_folder": "kubernetes_core",
          "install_scripts": [
            "installCalicoNetwork.sh"
          ],
          "pre_install_scripts": [],
          "post_install_scripts": []
        }
      ]
    },
    "cert_manager": {
      "applications": [
        {
          "name": "cert-manager",
          "Description": "Cert Manager",
          "namespace": "cert-manager",
          "installation_type": "script",
          "installation_group_folder": "kubernetes_core",
          "install_scripts": [
            "installCertManager.sh"
          ],
          "pre_install_scripts": [],
          "post_install_scripts": []
        }
      ]
    },
    "nginx_ingress_controller": {
      "applications": [
        {
          "name": "nginx-ingress-controller",
          "namespace": "nginx-ingress-controller",
          "installation_type": "helm",
          "installation_group_folder": "kubernetes_core",
          "helm_params": {
            "repository_url": "https://kubernetes.github.io/ingress-nginx",
            "repository_name": "ingress-nginx/ingress-nginx",
            "helm_version": "",
            "set_key_values": [
              "rbac.create=true",
              "controller.extraArgs.default-ssl-certificate={{namespace}}/kx.as.code-wildcard-cert",
              "controller.extraArgs.enable-ssl-passthrough=",
              "controller.hostNetwork=true",
              "controller.extraArgs.report-node-internal-ip-address="
            ]
          },
          "Description": "NGINX Ingress Controller",
          "pre_install_scripts": [
            "createWildcardCertSecret.sh"
          ],
          "post_install_scripts": [
            "configureWildcardDns.sh",
            "workaround.sh"
          ]
        }
      ]
    },
    "metallb_loadbalancer": {
      "applications": [
        {
          "name": "metallb-loadbalancer",
          "Description": "MetalLB Load Balancer",
          "namespace": "metallb-system",
          "installation_type": "script",
          "installation_group_folder": "kubernetes_core",
          "install_scripts": [
            "installMetalLb.sh"
          ],
          "pre_install_scripts": [
            "createMemberListSecret.sh"
          ],
          "post_install_scripts": []
        }
      ]
    },
    "metrics_server": {
      "applications": [
        {
          "name": "metrics-server",
          "Description": "Metrics Server",
          "namespace": "kube-system",
          "installation_type": "script",
          "installation_group_folder": "kubernetes_core",
          "install_scripts": [
            "installMetricsServer.sh"
          ],
          "pre_install_scripts": [],
          "post_install_scripts": []
        }
      ]
    },
    "kubernetes_dashboard": {
      "applications": [
        {
          "name": "kubernetes-dashboard",
          "namespace": "kubernetes-dashboard",
          "installation_type": "script",
          "installation_group_folder": "kubernetes_core",
          "categories": [
            "management",
            "kubernetes"
          ],
          "urls": [
            {
              "url": "https://k8s-dashboard.kx-as-code.local",
              "healthchecks": {
                "liveliness": {
                  "http_path": "/",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                },
                "readiness": {
                  "http_path": "/",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  }
                }
              }
            }
          ],
          "Description": "Kubernetes Dashboard Description",
          "shortcut_text": "Kubernetes Dashboard",
          "shortcut_icon": "kubernetes.png",
          "install_scripts": [
            "installDashboard.sh"
          ],
          "pre_install_scripts": [],
          "post_install_scripts": [
            "checkK8sHealthAfterReboot.sh",
            "createDesktopShortcuts.sh"

          ]
        }
      ]
    },
    "gitlab_ce": {
      "applications": [
        {
          "name": "gitlab-ce",
          "namespace": "gitlab-ce",
          "installation_type": "helm",
          "installation_group_folder": "cicd",
          "environment_variables": {
            "gitabRunnerVersion": "v13.4.1"
          },
          "helm_params": {
            "repository_url": "https://charts.gitlab.io/",
            "repository_name": "gitlab/gitlab",
            "helm_version": "",
            "set_key_values": [
              "global.hosts.domain=kx-as-code.local",
              "global.hosts.externalIP={{nginxIngressIp}}",
              "externalUrl={{applicationUrl}}",
              "global.edition=ce",
              "prometheus.install=false",
              "global.smtp.enabled=false",
              "gitlab-runner.install=true",
              "gitlab-runner.image=registry.kx-as-code.local/devops/gitlab-runner:alpine-{{gitabRunnerVersion}}",
              "gitlab-runner.runners.privileged=true",
              "gitlab-runner.certsSecretName=kx.as.code-wildcard-cert",
              "global.ingress.class=nginx",
              "global.ingress.enabled=true",
              "global.ingress.tls.enabled=true",
              "gitlab.webservice.ingress.tls.secretName=kx.as.code-wildcard-cert",
              "nginx-ingress.enabled=false",
              "global.certmanager.install=false",
              "certmanager.install=false",
              "global.ingress.configureCertmanager=false",
              "global.hosts.https=true",
              "global.minio.enabled=false",
              "registry.enabled=false",
              "global.appConfig.lfs.bucket=gitlab-lfs-storage",
              "global.appConfig.lfs.connection.secret=object-storage",
              "global.appConfig.lfs.connection.key=connection",
              "global.appConfig.artifacts.bucket=gitlab-artifacts-storage",
              "global.appConfig.artifacts.connection.secret=object-storage",
              "global.appConfig.artifacts.connection.key=connection",
              "global.appConfig.uploads.connection.secret=object-storage",
              "global.appConfig.uploads.bucket=gitlab-uploads-storage",
              "global.appConfig.uploads.connection.key=connection",
              "global.appConfig.packages.bucket=gitlab-packages-storage",
              "global.appConfig.packages.connection.secret=object-storage",
              "global.appConfig.packages.connection.key=connection",
              "global.appConfig.externalDiffs.bucket=gitlab-externaldiffs-storage",
              "global.appConfig.externalDiffs.connection.secret=object-storage",
              "global.appConfig.externalDiffs.connection.key=connection",
              "global.appConfig.pseudonymizer.bucket=gitlab-pseudonymizer-storage",
              "global.appConfig.pseudonymizer.connection.secret=object-storage",
              "global.appConfig.pseudonymizer.connection.key=connection",
              "redis.resources.requests.cpu=10m",
              "redis.resources.requests.memory=64Mi",
              "global.rails.bootsnap.enabled=false",
              "gitlab.webservice.minReplicas=1",
              "gitlab.webservice.maxReplicas=1",
              "gitlab.webservice.resources.limits.memory=1.5G",
              "gitlab.webservice.requests.cpu=100m",
              "gitlab.webservice.requests.memory=900M",
              "gitlab.workhorse.resources.limits.memory=100M",
              "gitlab.workhorse.requests.cpu=10m",
              "gitlab.workhorse.requests.memory=10M",
              "gitlab.sidekiq.minReplicas=1",
              "gitlab.sidekiq.maxReplicas=1",
              "gitlab.sidekiq.resources.limits.memory=1.5G",
              "gitlab.sidekiq.requests.cpu=50m",
              "gitlab.sidekiq.requests.memory=625M",
              "gitlab.gitlab-shell.minReplicas=1",
              "gitlab.gitlab-shell.maxReplicas=1",
              "task-runnerbackups.objectStorage.config.secret=s3cmd-config",
              "task-runnerbackups.objectStorage.config.key=config",
              "gitlab.gitaly.persistence.storageClass=gluster-heketi",
              "gitlab.gitaly.persistence.size=10Gi",
              "postgresql.persistence.storageClass=local-storage",
              "postgresql.persistence.size=5Gi",
              "redis.master.persistence.storageClass=local-storage",
              "redis.master.persistence.size=5Gi"
            ]
          },
          "categories": [
            "git-repository",
            "docker-registry",
            "cicd"
          ],
          "urls": [
            {
              "url": "https://gitlab.kx-as-code.local",
              "healthchecks": {
                "liveliness": {
                  "http_path": "/-/readiness",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                },
                "readiness": {
                  "http_path": "/-/readiness",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  }
                }
              }
            }
          ],
          "Description": "Gitlab CE Git Repository and CICD",
          "shortcut_text": "Gitlab CE",
          "shortcut_icon": "gitlab.png",
          "pre_install_scripts": [
            "getVariables.sh",
            "createS3Buckets.sh",
            "createSecrets.sh"
          ],
          "post_install_scripts": [
            "createLoginToken.sh",
            "createUsers.sh",
            "createGroups.sh",
            "mapUsersToGroups.sh"
          ]
        }
      ]
    },
    "gitlab_runner": {
      "applications": [
        {
          "name": "gitlab-runner",
          "namespace": "gitlab-ce",
          "installation_type": "script",
          "installation_group_folder": "cicd",
          "install_scripts": [
            "buildAndPushCustomImages.sh"
          ],
          "environment_variables": {
            "gitlabDindImageVersion": "19.03.13-dind",
            "gitabRunnerVersion": "v13.4.1"
          },
          "categories": [
            "cicd"
          ],
          "Description": "Customized Gitlab Runner for Gitlab-CE",
          "pre_install_scripts": [],
          "post_install_scripts": []
        }
      ]
    },
    "gitea": {
      "applications": [
        {
          "name": "gitea",
          "namespace": "gitea",
          "installation_type": "helm",
          "installation_group_folder": "cicd",
          "helm_params": {
            "repository_url": "https://dl.gitea.io/charts/",
            "repository_name": "gitea-charts/gitea",
            "helm_version": "",
            "set_key_values": [
              "gitea.config.APP_NAME=Gitea: With a cup of tea.",
              "gitea.config.repository.ROOT=~/gitea-repositories",
              "gitea.config.repository.pull-request.WORK_IN_PROGRESS_PREFIXES=WIP:,[WIP]:",
              "gitea.cache.builtIn.enabled=true",
              "gitea.admin.username=admin",
              "gitea.admin.password={{vmPassword}}",
              "gitea.admin.email=admin@kx-as-code.local",
              "persistence.enabled=true",
              "persistence.storageClass=gluster-heketi",
              "persistence.size=5Gi",
              "postgresql.persistence.enabled=true",
              "postgresql.persistence.size=5Gi",
              "postgresql.storageClass=local-strorage"
            ]
          },
          "categories": [
            "git-repository"
          ],
          "urls": [
            {
              "url": "https://gitea.kx-as-code.local",
              "healthchecks": {
                "liveliness": {
                  "http_path": "/",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                },
                "readiness": {
                  "http_path": "/",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                }
              }
            }
          ],
          "Description": "Gitea Git Repository",
          "shortcut_text": "Gitea",
          "shortcut_icon": "gitea.png",
          "pre_install_scripts": [],
          "post_install_scripts": [
            "createTeams.sh",
            "createProjects.sh",
            "createUsers.sh",
            "populateDemoProjects.sh"
          ]
        }
      ]
    },
    "minio_s3": {
      "applications": [
        {
          "name": "minio-s3",
          "namespace": "minio-s3",
          "installation_type": "helm",
          "installation_group_folder": "cicd",
          "helm_params": {
            "repository_url": "https://helm.min.io/",
            "repository_name": "minio/minio",
            "helm_version": "",
            "set_key_values": [
              "persistence.enabled=true",
              "persistence.storageClass=gluster-heketi",
              "persistence.size=10Gi",
              "persistence.accessMode=ReadWriteOnce",
              "existingSecret=minio-accesskey-secret",
              "ingress.enabled=true",
              "ingress.hosts[0]={{applicationDomain}}",
              "ingress.tls[0].hosts[0]={{applicationDomain}}",
              "ingress.annotations.\"nginx\\.ingress\\.kubernetes\\.io/proxy-body-size\"=\"1000m\"",
              "mode=standalone",
              "service.type=ClusterIP",
              "environment.MINIO_REGION=eu-central-1"
            ]
          },
          "categories": [
            "s3-storage"
          ],
          "urls": [
            {
              "url": "https://s3.kx-as-code.local",
              "healthchecks": {
                "liveliness": {
                  "http_path": "/minio/health/ready",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                },
                "readiness": {
                  "http_path": "/minio/health/ready",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                }
              }
            }
          ],
          "Description": "MinIO S3 Storage",
          "shortcut_text": "MinIO S3",
          "shortcut_icon": "minio.png",
          "pre_install_scripts": [
            "createSecrets.sh",
            "installMinIoCli.sh"
          ],
          "post_install_scripts": []
        }
      ]
    },
    "mattermost": {
      "applications": [
        {
          "name": "mattermost",
          "namespace": "gitlab-ce",
          "installation_type": "helm",
          "installation_group_folder": "collaboration",
          "helm_params": {
            "repository_url": "https://helm.mattermost.com",
            "repository_name": "mattermost/mattermost-team-edition",
            "helm_version": "",
            "set_key_values": []
          },
          "categories": [
            "chatops",
            "collaboration"
          ],
          "urls": [
            {
              "url": "https://mattermost.kx-as-code.local",
              "healthchecks": {
                "liveliness": {
                  "http_path": "/api/v4/system/ping",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                },
                "readiness": {
                  "http_path": "/api/v4/system/ping",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": ".status",
                    "json_value": "OK"
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                }
              }
            }
          ],
          "Description": "Mattermost ChatOps Collaboration",
          "shortcut_text": "Mattermost",
          "shortcut_icon": "mattermost.png",
          "health_check_command": "",
          "expected_check_command_response": "",
          "pre_install_scripts": [
            "createOauthIntegration.sh",
            "createSecret.sh",
            "createS3Bucket.sh"
          ],
          "post_install_scripts": [
            "createInitialAdminUser.sh",
            "createNotificationUsers.sh",
            "createTeams.sh",
            "mapUsersToTeams.sh",
            "createChannels.sh",
            "createWebhooks.sh"
          ]
        }
      ]
    },
    "rocketchat": {
      "applications": [
        {
          "name": "rocketchat",
          "namespace": "rocketchat",
          "installation_type": "helm",
          "installation_group_folder": "collaboration",
          "helm_params": {
            "repository_url": "",
            "repository_name": "",
            "helm_version": "",
            "set_key_values": []
          },
          "categories": [
            "chatops",
            "collaboration"
          ],
          "urls": [
            {
              "url": "https://rocketchat.kx-as-code.local",
              "healthchecks": {
                "liveliness": {
                  "http_path": "/api/info",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                },
                "readiness": {
                  "http_path": "/api/info",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                }
              }
            }
          ],
          "Description": "RocketChat ChatOps Collaboration0",
          "shortcut_text": "RocketChat",
          "shortcut_icon": "rocketchat.png",
          "pre_install_scripts": [],
          "post_install_scripts": []
        }
      ]
    },
    "argocd": {
      "applications": [
        {
          "name": "argocd",
          "namespace": "argocd",
          "installation_type": "helm",
          "installation_group_folder": "cicd",
          "helm_params": {
            "repository_url": "https://argoproj.github.io/argo-helm",
            "repository_name": "argo/argo-cd",
            "helm_version": "",
            "set_key_values": [
              "installCRDs=false",
              "configs.secret.argocdServerAdminPassword='{{argoCdAdminPassword}}'",
              "controller.clusterAdminAccess.enabled=true",
              "server.clusterAdminAccess.enabled=true",
              "server.extraArgs[0]=--insecure"
            ]
          },
          "categories": [
            "gitops"
          ],
          "urls": [
            {
              "url": "https://argocd.kx-as-code.local",
              "healthchecks": {
                "liveliness": {
                  "http_path": "/",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                },
                "readiness": {
                  "http_path": "/",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                }
              }
            }
          ],
          "Description": "ArgoCD Description",
          "shortcut_text": "Argo CD",
          "shortcut_icon": "argocd.png",
          "pre_install_scripts": [
            "installArgoCdCli.sh",
            "createArgoCdPassword.sh",
            "createIngressObjects.sh"
          ],
          "post_install_scripts": []
        }
      ]
    },
    "prometheus": {
      "applications": [
        {
          "name": "prometheus",
          "namespace": "monitoring",
          "installation_type": "helm",
          "installation_group_folder": "monitoring",
          "helm_params": {
            "repository_url": "",
            "repository_name": "stable/prometheus",
            "helm_version": "",
            "set_key_values": [
              "alertmanager.persistentVolume.enabled=true",
              "alertmanager.persistentVolume.storageClass=gluster-heketi",
              "alertmanager.ingress.enabled=true",
              "alertmanager.ingress.hosts[0]=alertmanager.kx-as-code.local",
              "alertmanager.ingress.tls[0].hosts[0]=alertmanager.kx-as-code.local",
              "server.persistentVolume.enabled=true",
              "server.persistentVolume.storageClass=local-storage",
              "server.ingress.enabled=true",
              "server.ingress.hosts[0]=prometheus.kx-as-code.local",
              "server.ingress.tls[0].hosts[0]=prometheus.kx-as-code.local"
            ]
          },
          "categories": [
            "monitoring"
          ],
          "urls": [
            {
              "url": "https://prometheus.kx-as-code.local",
              "healthchecks": {
                "liveliness": {
                  "http_path": "/-/ready",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                },
                "readiness": {
                  "http_path": "/-/ready",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                }
              }
            }
          ],
          "Descriptions": "Prometheus Description",
          "shortcut_text": "Prometheus",
          "shortcut_icon": "prometheus.png",
          "pre_install_scripts": [
            "getMattermostIntegrationId.sh"
          ],
          "post_install_scripts": []
        },
        {
          "urls": [
            {
              "url": "https://alertmanager.kx-as-code.local",
              "healthchecks": {
                "liveliness": {
                  "http_path": "/-/ready",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                },
                "readiness": {
                  "http_path": "/-/ready",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                }
              }
            }
          ],
          "Descriptions": "Alert Manager Description",
          "shortcut_text": "Alert Manager",
          "shortcut_icon": "prometheus.png",
          "pre_install_scripts": [],
          "post_install_scripts": []
        }
      ]
    },
    "grafana": {
      "applications": [
        {
          "name": "grafana",
          "namespace": "monitoring",
          "installation_type": "helm",
          "installation_group_folder": "monitoring",
          "environment_variables": {
            "grafanaVersion": "7.1.5"
          },
          "helm_params": {
            "repository_url": "",
            "repository_name": "stable/grafana",
            "helm_version": "",
            "set_key_values": [
              "image.repository=registry.kx-as-code.local/devops/grafana",
              "image.tag={{grafanaVersion}}",
              "ingress.enabled=true",
              "ingress.hosts[0]={{applicationDomain}}",
              "ingress.tls[0].hosts[0]={{applicationDomain}}",
              "persistence.enabled=true",
              "persistence.size=4Gi",
              "persistence.storageClassName=gluster-heketi",
              "admin.userKey=admin-user",
              "admin.passwordKey=admin-password",
              "admin.existingSecret=grafana-admin-credentials",
              "datasources.\"datasources\\.yaml\".datasources[0].name=Prometheus",
              "datasources.\"datasources\\.yaml\".datasources[0].type=prometheus",
              "datasources.\"datasources\\.yaml\".datasources[0].url=http://prometheus-server.monitoring:80",
              "datasources.\"datasources\\.yaml\".datasources[0].access=proxy",
              "datasources.\"datasources\\.yaml\".datasources[0].isDefault=true",
              "datasources.\"datasources\\.yaml\".datasources[0].name=Graphite",
              "datasources.\"datasources\\.yaml\".datasources[0].type=graphite",
              "datasources.\"datasources\\.yaml\".datasources[0].url=http://graphite:8080",
              "datasources.\"datasources\\.yaml\".datasources[0].access=proxy",
              "datasources.\"datasources\\.yaml\".datasources[0].isDefault=false",
              "dashboardProviders.\"dashboardproviders\\.yaml\".apiVersion=1",
              "dashboardProviders.\"dashboardproviders\\.yaml\".providers[0].name=default",
              "dashboardProviders.\"dashboardproviders\\.yaml\".providers[0].orgId=1",
              "dashboardProviders.\"dashboardproviders\\.yaml\".providers[0].type=file",
              "dashboardProviders.\"dashboardproviders\\.yaml\".providers[0].disableDeletion=false",
              "dashboardProviders.\"dashboardproviders\\.yaml\".providers[0].editable=true",
              "dashboardProviders.\"dashboardproviders\\.yaml\".providers[0].options.path=/var/lib/grafana/dashboards/default",
              "dashboards.default.node-exporter.gnetId=1860",
              "dashboards.default.node-exporter.revision=21",
              "dashboards.default.node-exporter.datasource=Prometheus",
              "notifiers.\"notifiers\\.yaml\".notifiers[0].name=slack-notifier",
              "notifiers.\"notifiers\\.yaml\".notifiers[0].type=slack",
              "notifiers.\"notifiers\\.yaml\".notifiers[0].uid=slack",
              "notifiers.\"notifiers\\.yaml\".notifiers[0].settings.url=http://mattermost-team-edition.gitlab-ce:8065/hooks/{{monitoringWebhookId}}",
              "plugins[0]=grafana-image-renderer",
              "plugins[1]=grafana-piechart-panel"
            ]
          },
          "categories": [
            "visualization",
            "monitoring"
          ],
          "urls": [
            {
              "url": "https://grafana.kx-as-code.local",
              "healthchecks": {
                "liveliness": {
                  "http_path": "/api/health",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                },
                "readiness": {
                  "http_path": "/api/health",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                }
              }
            }
          ],
          "Description": "Grafana Description",
          "shortcut_text": "Grafana",
          "shortcut_icon": "grafana.png",
          "pre_install_scripts": [
            "getMinIoAccessKey.sh",
            "createAdminCredentialsSecret.sh",
            "rebuildDockerImage.sh",
            "createOauthIntegration.sh",
            "getMattermostApplicationId.sh"
          ],
          "post_install_scripts": []
        },
        {
          "name": "grafana-image-renderer",
          "namespace": "monitoring",
          "installation_type": "argocd",
          "installation_group_folder": "monitoring",
          "argocd_params": {
            "repository": "{{gitUrl}}/devops/grafana_image_renderer.git",
            "path": ".",
            "dest_server": "https://kubernetes.default.svc",
            "dest_namespace": "devops",
            "sync_policy": "automated",
            "auto_prune": true,
            "self_heal": true
          },
          "categories": [
            "visualization",
            "monitoring"
          ],
          "urls": [
            {
              "url": "https://grafana-image-renderer.kx-as-code.local",
              "healthchecks": {
                "liveliness": {
                  "http_path": "/",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                },
                "readiness": {
                  "http_path": "/",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                }
              }
            }
          ],
          "Description": "Grafana Image Renderer Description",
          "shortcut_text": "",
          "shortcut_icon": "",
          "pre_install_scripts": [
            "createGitProject.sh",
            "populateGitProject.sh"
          ],
          "post_install_scripts": []
        }
      ]
    },
    "graphite": {
      "applications": [
        {
          "name": "graphite",
          "namespace": "monitoring",
          "installation_type": "helm",
          "installation_group_folder": "monitoring",
          "helm_params": {
            "repository_url": "https://kiwigrid.github.io",
            "repository_name": "kiwigrid/graphite",
            "helm_version": "",
            "set_key_values": [
              "persistence.enabled=true",
              "persistence.storageClass=local-storage",
              "persistence.size=1Gi",
              "ingress.enabled=true",
              "ingress.hosts[0]=graphite.kx-as-code.local",
              "ingress.tls[0].hosts[0]=graphite.kx-as-code.local",
              "ingress.annotations.\"nginx\\.ingress\\.kubernetes\\.io/proxy-body-size\"=\"100m\""
            ]
          },
          "categories": [
            "monitoring",
            "cicd"
          ],
          "urls": [
            {
              "url": "https://graphite.kx-as-code.local",
              "healthchecks": {
                "liveliness": {
                  "http_path": "/",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                },
                "readiness": {
                  "http_path": "/",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                }
              }
            }
          ],
          "Description": "Graphite for collecting SiteSpeed.io Metrics",
          "shortcut_text": "Graphite",
          "shortcut_icon": "graphite.png",
          "pre_install_scripts": [],
          "post_install_scripts": []
        }
      ]
    },
    "artifactory_oss": {
      "applications": [
        {
          "name": "artifactory-oss",
          "namespace": "artifactory",
          "installation_type": "helm",
          "installation_group_folder": "cicd",
          "helm_params": {
            "repository_url": "https://repo.chartcenter.io",
            "repository_name": "center/jfrog/artifactory-oss",
            "helm_version": "",
            "set_key_values": [
              "admin.username=admin",
              "admin.password={{vmPassword}}",
              "persistence.size=5Gi",
              "artifactory.nginx.enabled=false",
              "artifactory.ingress.enabled=true",
              "artifactory.ingress.hosts[0]={{applicationDomain}}",
              "artifactory.persistence.storageClassName=glusterfs",
              "artifactory.persistence.size=5Gi",
              "databaseUpgradeReady=yes",
              "postgresql.enabled=true",
              "postgresql.postgresqlPassword={{postgresqlPassword}}",
              "postgresql.global.persistence.storageClass=local-storage",
              "postgresql.persistence.enabled=false",
              "postgresql.persistence.storageClass=local-storage",
              "postgresql.persistence.size=5Gi"
            ]
          },
          "categories": [
            "artifact-repository",
            "docker-registry"
          ],
          "urls": [
            {
              "url": "https://artifactory.kx-as-code.local",
              "healthchecks": {
                "liveliness": {
                  "http_path": "/artifactory/api/system/ping",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                },
                "readiness": {
                  "http_path": "/",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                }
              }
            }
          ],
          "Description": "Artifactory Description",
          "shortcut_text": "Artifactory OSS",
          "shortcut_icon": "artifactory.png",
          "pre_install_scripts": [
            "createPostgresPassword.sh"
          ],
          "post_install_scripts": [
            "configureJfrogArtifactory.sh",
            "changeAdminPassword.sh"
          ]
        }
      ]
    },
    "nexus3": {
      "applications": [
        {
          "name": "nexus3",
          "namespace": "nexus3",
          "installation_type": "argocd",
          "installation_group_folder": "cicd",
          "argocd_params": {
            "repository": "{{gitUrl}}/devops/nexus3.git",
            "path": ".",
            "dest_server": "https://kubernetes.default.svc",
            "dest_namespace": "devops",
            "sync_policy": "automated",
            "auto_prune": true,
            "self_heal": true
          },
          "categories": [
            "artifact-repository",
            "docker-registry"
          ],
          "urls": [
            {
              "url": "https://nexus.kx-as-code.local",
              "healthchecks": {
                "liveliness": {
                  "http_path": "/service/metrics/ping",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                },
                "readiness": {
                  "http_path": "/service/metrics/ping",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                }
              }
            }
          ],
          "Description": "Nexus3 Description",
          "shortcut_text": "Nexus3 OSS",
          "shortcut_icon": "nexus.png",
          "pre_install_scripts": [
            "createGitProject.sh",
            "populateGitProject.sh"
          ],
          "post_install_scripts": []
        }
      ]
    },
    "selenium": {
      "applications": [
        {
          "name": "selenium",
          "namespace": "selenium",
          "installation_type": "helm",
          "installation_group_folder": "test_automation",
          "helm_params": {
            "repository_url": "",
            "repository_name": "stable/selenium",
            "helm_version": "",
            "set_key_values": [
              "chromeDebug.replicas=1",
              "chromeDebug.enabled=true",
              "firefox.replicas=1",
              "firefox.enabled=true",
              "hub.ingress.enabled=true",
              "hub.ingress.hosts[0]={{applicationDomain}}",
              "hub.ingress.tls[0].hosts[0]={{applicationDomain}}"
            ]
          },
          "categories": [
            "test-automation"
          ],
          "urls": [
            {
              "url": "https://selenium.kx-as-code.local",
              "healthchecks": {
                "liveliness": {
                  "http_path": "/",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                },
                "readiness": {
                  "http_path": "/",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                }
              }
            }
          ],
          "Description": "Selenium Hub Description",
          "shortcut_text": "Selenium Hub",
          "shortcut_icon": "selenium.png",
          "pre_install_scripts": [],
          "post_install_scripts": []
        }
      ]
    },
    "elastic_stack": {
      "applications": [
        {
          "name": "elastic-elasticsearch-oss",
          "namespace": "elastic-stack",
          "installation_type": "helm",
          "installation_group_folder": "monitoring",
          "helm_params": {
            "repository_url": "https://helm.elastic.co",
            "repository_name": "elastic/elasticsearch",
            "helm_version": "",
            "set_key_values": [
              "replicas=1",
              "volumeClaimTemplate.storageClassName=local-storage",
              "volumeClaimTemplate.resources.requests.storage=10Gi"
            ]
          },
          "categories": [
            "monitoring",
            "datastore",
            "search-engine"
          ],
          "urls": [
            {
              "url": "https://elasticsearch.kx-as-code.local",
              "healthchecks": {
                "liveliness": {
                  "http_path": "/",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                },
                "readiness": {
                  "http_path": "/",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                }
              }
            }
          ],
          "Description": "Elasticsearch Description",
          "shortcut_text": "Elasticsearch",
          "shortcut_icon": "elasticsearch.png",
          "pre_install_scripts": [],
          "post_install_scripts": []
        },
        {
          "name": "elastic-filebeat-oss",
          "namespace": "elastic-stack",
          "installation_type": "helm",
          "installation_group_folder": "monitoring",
          "helm_params": {
            "repository_url": "https://helm.elastic.co",
            "repository_name": "elastic/filebeat",
            "helm_version": "",
            "set_key_values": []
          },
          "categories": [
            "monitoring",
            "log-harvester"
          ],
          "urls": [
            {
              "url": "",
              "healthchecks": {
                "liveliness": {
                  "http_path": "/",
                  "http_auth_required": false,
                  "expected_http_response_code": "",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                },
                "readiness": {
                  "http_path": "/",
                  "http_auth_required": false,
                  "expected_http_response_code": "",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                }
              }
            }
          ],
          "Description": "Filebeat Description",
          "shortcut_text": "",
          "shortcut_icon": "",
          "pre_install_scripts": [],
          "post_install_scripts": []
        },
        {
          "name": "elastic-kibana-oss",
          "namespace": "elastic-stack",
          "installation_type": "helm",
          "installation_group_folder": "monitoring",
          "helm_params": {
            "repository_url": "https://helm.elastic.co",
            "repository_name": "elastic/kibana",
            "helm_version": "",
            "set_key_values": [
              "ingress.enabled=true",
              "ingress.hosts[0]={{applicationDomain}}",
              "ingress.tls[0].hosts[0]={{applicationDomain}}"
            ]
          },
          "categories": [
            "monitoring",
            "visualization"
          ],
          "urls": [
            {
              "url": "https://kibana.kx-as-code.local",
              "healthchecks": {
                "liveliness": {
                  "http_path": "/status",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                },
                "readiness": {
                  "http_path": "/status",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                }
              }
            }
          ],
          "Description": "Elastic-Stack Description",
          "shortcut_text": "Kibana",
          "shortcut_icon": "kibana.png",
          "pre_install_scripts": [],
          "post_install_scripts": []
        }
      ]
    },
    "sonarqube": {
      "applications": [
        {
          "name": "sonarqube",
          "namespace": "sonarqube",
          "installation_type": "helm",
          "installation_group_folder": "cicd",
          "helm_params": {
            "repository_url": "https://oteemo.github.io/charts/",
            "repository_name": "oteemo/sonarqube",
            "helm_version": "",
            "set_key_values": [
              "replicaCount=1",
              "ingress.enabled=true",
              "ingress.hosts[0].name={{applicationDomain}}",
              "ingress.tls[0].hosts[0]={{applicationDomain}}",
              "persistence.enabled=true",
              "persistence.storageClass=local-storage",
              "persistence.size=1Gi",
              "postgresql.enabled=true",
              "postgresql.postgresqlUsername=sonarqube",
              "postgresql.postgresqlPassword={{postgresqlPassword}}",
              "postgresql.postgresqlDatabase=sonarqube",
              "postgresql.service.port=5432",
              "postgresql.global.persistence.storageClass=local-storage",
              "postgresql.persistence.enabled=true",
              "postgresql.persistence.storageClass=local-storage",
              "postgresql.persistence.size=1Gi",
              "caCerts.secret=kx-ca-certs"
            ]
          },
          "categories": [
            "code-quality"
          ],
          "urls": [
            {
              "url": "https://sonarqube.kx-as-code.local",
              "healthchecks": {
                "liveliness": {
                  "http_path": "/",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                },
                "readiness": {
                  "http_path": "/",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                }
              }
            }
          ],
          "Description": "Sonarqube Description",
          "shortcut_text": "Sonarqube",
          "shortcut_icon": "sonarqube.png",
          "pre_install_scripts": [
            "createCaSecret.sh",
            "createPostgresPassword.sh",
            "createOauthIntegration.sh"
          ],
          "post_install_scripts": [
            "createGitlabOauthApplication.sh",
            "configureSonarQube.sh"
          ]
        }
      ]
    },
    "kx_as_code_docs": {
      "applications": [
        {
          "name": "kx.as.code_docs",
          "namespace": "devops",
          "installation_type": "argocd",
          "installation_group_folder": "kx_as_code",
          "argocd_params": {
            "repository": "{{gitUrl}}/kx.as.code/kx.as.code_docs.git",
            "path": "kubernetes",
            "dest_server": "https://kubernetes.default.svc",
            "dest_namespace": "devops",
            "sync_policy": "automated",
            "auto_prune": true,
            "self_heal": true
          },
          "categories": [
            "kx.as.code"
          ],
          "urls": [
            {
              "url": "https://docs.kx-as-code.local",
              "healthchecks": {
                "liveliness": {
                  "http_path": "/",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                },
                "readiness": {
                  "http_path": "/",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                }
              }
            }
          ],
          "Description": "KX.AS.CODE Docs Description",
          "shortcut_text": "KX.AS.CODE Docs",
          "shortcut_icon": "books.png",
          "pre_install_scripts": [
            "createGitProject.sh",
            "populateGitProject.sh",
            "buildAndPushDockerImage.sh"
          ],
          "post_install_scripts": []
        }
      ]
    },
    "kx_as_code_techradar": {
      "applications": [
        {
          "name": "kx.as.code_techradar",
          "namespace": "devops",
          "installation_type": "argocd",
          "installation_group_folder": "kx_as_code",
          "argocd_params": {
            "repository": "{{gitUrl}}/kx.as.code/kx.as.code_techradar.git",
            "path": "kubernetes",
            "dest_server": "https://kubernetes.default.svc",
            "dest_namespace": "devops",
            "sync_policy": "automated",
            "auto_prune": true,
            "self_heal": true
          },
          "categories": [
            "kx.as.code"
          ],
          "urls": [
            {
              "url": "https://techradar.kx-as-code.local",
              "healthchecks": {
                "liveliness": {
                  "http_path": "/",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                },
                "readiness": {
                  "http_path": "/",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                }
              }
            }
          ],
          "Description": "Tech Radar Description",
          "shortcut_text": "Tech Radar",
          "shortcut_icon": "techradar.png",
          "pre_install_scripts": [
            "createGitProject.sh",
            "populateGitProject.sh",
            "buildAndPushDockerImage.sh"
          ],
          "post_install_scripts": []
        }
      ]
    },
    "harbor": {
      "applications": [
        {
          "name": "harbor",
          "namespace": "harbor",
          "installation_type": "helm",
          "installation_group_folder": "cicd",
          "helm_params": {
            "repository_url": "https://helm.goharbor.io",
            "repository_name": "harbor/harbor",
            "helm_version": "1.3.0",
            "set_key_values": [
              "persistence.enabled=true",
              "persistence.persistentVolumeClaim.registry.storageClass=local-storage",
              "persistence.persistentVolumeClaim.registry.size=9Gi",
              "persistence.persistentVolumeClaim.chartmuseum.size=5Gi",
              "persistence.persistentVolumeClaim.chartmuseum.storageClass=gluster-heketi",
              "persistence.persistentVolumeClaim.database.size=5Gi",
              "persistence.persistentVolumeClaim.database.storageClass=local-storage",
              "persistence.persistentVolumeClaim.redis.storageClass=local-storage",
              "persistence.persistentVolumeClaim.jobservice.storageClass=gluster-heketi",
              "persistence.persistentVolumeClaim.trivy.storageClass=gluster-heketi",
              "externalURL={{applicationUrl}}",
              "expose.ingress.hosts.core=registry.kx-as-code.local",
              "expose.ingress.hosts.notary=notary.kx-as-code.local",
              "expose.tls.caBundleSecretName=kx.as.code-wildcard-cert",
              "expose.tls.caSecretName=kx.as.code-wildcard-cert",
              "expose.tls.secretName=kx.as.code-wildcard-cert",
              "expose.tls.notarySecretName=kx.as.code-wildcard-cert",
              "harborAdminPassword=\"{{vmPassword}}\"",
              "expose.ingress.annotations.\"nginx\\.ingress\\.kubernetes\\.io/proxy-body-size\"=\"10000m\"",
              "logLevel=debug"
            ]
          },
          "categories": [
            "docker-registry",
            "helm-repository"
          ],
          "urls": [
            {
              "url": "https://registry.kx-as-code.local",
              "healthchecks": {
                "liveliness": {
                  "http_path": "/",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                },
                "readiness": {
                  "http_path": "/",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                }
              }
            }
          ],
          "Description": "Harbor Description",
          "shortcut_text": "Harbor",
          "shortcut_icon": "harbor.png",
          "pre_install_scripts": [
            "createSecret.sh"
          ],
          "post_install_scripts": [
            "createProjects.sh",
            "createRobotAccounts.sh"
          ]
        }
      ]
    },
    "docker_registry": {
      "applications": [
        {
          "name": "docker-registry",
          "namespace": "docker-registry",
          "installation_type": "helm",
          "installation_group_folder": "cicd",
          "helm_params": {
            "repository_url": "https://helm.goharbor.io",
            "repository_name": "harbor/harbor",
            "helm_version": "1.3.0",
            "set_key_values": []
          },
          "categories": [
            "docker-registry"
          ],
          "urls": [
            {
              "url": "https://registry.kx-as-code.local",
              "healthchecks": {
                "liveliness": {
                  "http_path": "/",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                },
                "readiness": {
                  "http_path": "/",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                }
              }
            }
          ],
          "Description": "Docker Registry Description",
          "shortcut_text": "Docker Registry",
          "shortcut_icon": "",
          "pre_install_scripts": [],
          "post_install_scripts": []
        }
      ]
    },
    "consul": {
      "applications": [
        {
          "name": "consul",
          "namespace": "vault",
          "installation_type": "helm",
          "installation_group_folder": "cicd",
          "helm_params": {
            "repository_url": "https://helm.releases.hashicorp.com",
            "repository_name": "hashicorp/consul",
            "helm_version": "",
            "set_key_values": []
          },
          "categories": [
            "service-discovery",
            "service-mesh"
          ],
          "urls": [
            {
              "url": "https://consul.kx-as-code.local",
              "healthchecks": {
                "liveliness": {
                  "http_path": "/",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                },
                "readiness": {
                  "http_path": "/",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                }
              }
            }
          ],
          "Description": "HashiCorp Consul Service Discovery",
          "shortcut_text": "HashiCorp Consul",
          "shortcut_icon": "consul.png",
          "pre_install_scripts": [
            "configureIngress.sh"
          ],
          "post_install_scripts": []
        }
      ]
    },
    "vault": {
      "applications": [
        {
          "name": "vault",
          "namespace": "vault",
          "installation_type": "helm",
          "installation_group_folder": "security",
          "helm_params": {
            "repository_url": "https://helm.releases.hashicorp.com",
            "repository_name": "hashicorp/vault",
            "helm_version": "",
            "set_key_values": []
          },
          "categories": [
            "security",
            "credential-store"
          ],
          "urls": [
            {
              "url": "https://vault.kx-as-code.local",
              "healthchecks": {
                "liveliness": {
                  "http_path": "/",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                },
                "readiness": {
                  "http_path": "/",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                }
              }
            }
          ],
          "Description": "HashiCorp Vault Description",
          "shortcut_text": "HashiCorp Vault",
          "shortcut_icon": "vault.png",
          "pre_install_scripts": [],
          "post_install_scripts": [
            "initialiseVault.sh",
            "unsealVault.sh",
            "enableUserPassAuth.sh",
            "createKxUser.sh"
          ]
        }
      ]
    },
    "sysdig_falco": {
      "applications": [
        {
          "name": "sysdig-falco",
          "namespace": "sysdig-falco",
          "installation_type": "helm",
          "installation_group_folder": "security",
          "environment_variables": {
            "logLevel": "debug",
            "priority": "notice"
          },
          "helm_params": {
            "repository_url": "https://falcosecurity.github.io/charts",
            "repository_name": "falcosecurity/falco",
            "helm_version": "",
            "set_key_values": []
          },
          "categories": [
            "security",
            "credential-store"
          ],
          "urls": [
            {
              "url": "",
              "healthchecks": {
                "liveliness": {
                  "http_path": "/",
                  "http_auth_required": false,
                  "expected_http_response_code": "",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                },
                "readiness": {
                  "http_path": "/",
                  "http_auth_required": false,
                  "expected_http_response_code": "",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                }
              }
            }
          ],
          "Description": "HashiCorp Vault Description",
          "shortcut_text": "HashiCorp Vault",
          "shortcut_icon": "vault.png",
          "pre_install_scripts": [
            "getMattermostIntegrationId.sh"
          ],
          "post_install_scripts": []
        }
      ]
    },
    "jira": {
      "applications": [
        {
          "name": "jira",
          "namespace": "atlassian",
          "installation_type": "argocd",
          "installation_group_folder": "collaboration",
          "argocd_params": {
            "repository": "{{gitUrl}}/devops/jira.git",
            "path": ".",
            "dest_server": "https://kubernetes.default.svc",
            "dest_namespace": "devops",
            "sync_policy": "automated",
            "auto_prune": true,
            "self_heal": true
          },
          "categories": [
            "collaboration",
            "agile-management"
          ],
          "urls": [
            {
              "url": "https://jira.kx-as-code.local",
              "healthchecks": {
                "liveliness": {
                  "http_path": "/",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                },
                "readiness": {
                  "http_path": "/",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                }
              }
            }
          ],
          "Description": "Atlassian Jira Description",
          "shortcut_text": "Atlassian Jira",
          "shortcut_icon": "jira.png",
          "pre_install_scripts": [
            "createGitProject.sh",
            "populateGitProject.sh"
          ],
          "post_install_scripts": []
        }
      ]
    },
    "confluence": {
      "applications": [
        {
          "name": "confluence",
          "namespace": "atlassian",
          "installation_type": "argocd",
          "installation_group_folder": "collaboration",
          "argocd_params": {
            "repository": "{{gitUrl}}/devops/confluence.git",
            "path": ".",
            "dest_server": "https://kubernetes.default.svc",
            "dest_namespace": "devops",
            "sync_policy": "automated",
            "auto_prune": true,
            "self_heal": true
          },
          "categories": [
            "collaboration",
            "wiki"
          ],
          "urls": [
            {
              "url": "https://confluence.kx-as-code.local",
              "healthchecks": {
                "liveliness": {
                  "http_path": "/",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                },
                "readiness": {
                  "http_path": "/",
                  "http_auth_required": false,
                  "expected_http_response_code": "200",
                  "expected_http_response_string": "",
                  "expected_json_response": {
                    "json_path": "",
                    "json_value": ""
                  },
                  "health_shell_check_command": "",
                  "expected_shell_check_command_response": ""
                }
              }
            }
          ],
          "Description": "Atlassian Confluence Description",
          "shortcut_text": "Atlassian Confluence",
          "shortcut_icon": "confluence.png",
          "pre_install_scripts": [
            "createGitProject.sh",
            "populateGitProject.sh"
          ],
          "post_install_scripts": []
        }
      ]
    }
  }
}
