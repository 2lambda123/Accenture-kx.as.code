require 'yaml'
require 'json'

if Vagrant::Util::Platform.windows?
    # Is Windows
    puts "Vagrant launched from windows."
    VMWARE_DISK_UTILITY="C:/Program Files (x86)/VMware/VMware Workstation/vmware-vdiskmanager.exe"
    KX_SYNC_FOLDER_PATH="c:/Users/Patrick/KX_Share"
    KX_MAIN_BOX_LOCATION="V:/jenkins_remote/workspace/VMWare_Workstation/KX.AS.CODE_Main_Build/base-vm/boxes/vmware-desktop-#{BOX_VERSION}/kx.as.code-main-demo-#{BOX_VERSION}.box"
    KX_WORKER_BOX_LOCATION="V:/jenkins_remote/workspace/VMWare_Workstation/KX.AS.CODE_Worker_Build/base-vm/boxes/vmware-desktop-#{BOX_VERSION}/kx.as.code-worker-demo-#{BOX_VERSION}.box"
elsif Vagrant::Util::Platform.darwin?
    # Is Mac
    puts "Vagrant launched from mac."
    VMWARE_DISK_UTILITY="/Applications/VMware\ Fusion.app/Contents/Library/vmware-vdiskmanager"
    KX_SYNC_FOLDER_PATH="/Users/patrick/KX_Share"
    KX_MAIN_BOX_LOCATION="/Users/patrick/jenkins_remote/workspace/VMWare_Workstation/KX.AS.CODE_Main_Build/base-vm/boxes/vmware-desktop-#{BOX_VERSION}/kx.as.code-main-demo-#{BOX_VERSION}.box"
    KX_WORKER_BOX_LOCATION="/Users/patrick/jenkins_remote/workspace/VMWare_Workstation/KX.AS.CODE_Worker_Build/base-vm/boxes/vmware-desktop-#{BOX_VERSION}/kx.as.code-worker-demo-#{BOX_VERSION}.box"
else
    # Assume WSL for now
    puts "Vagrant launched from other system, maybe WSL?"
    VMWARE_DISK_UTILITY="/mnt/c/Program Files (x86)/VMware/VMware Workstation/vmware-vdiskmanager.exe"
    KX_SYNC_FOLDER_PATH="/mnt/c/Users/patrick/KX_Share"
    KX_MAIN_BOX_LOCATION="/mnt/v/jenkins_remote/workspace/VMWare_Workstation/KX.AS.CODE_Main_Build/base-vm/boxes/vmware-desktop-#{BOX_VERSION}/kx.as.code-main-demo-#{BOX_VERSION}.box"
    KX_WORKER_BOX_LOCATION="/mnt/v/jenkins_remote/workspace/VMWare_Workstation/KX.AS.CODE_Worker_Build/base-vm/boxes/vmware-desktop-#{BOX_VERSION}/kx.as.code-worker-demo-#{BOX_VERSION}.box"
end

file = File.read('profile-config.json')
profile_config = JSON.parse(file)

profile_config_local_volumes=profile_config['config']['local_volumes']
puts "Profile Config #{profile_config_local_volumes}"

# Get needed capacity for GlusterFS volumes disk size
GLUSTERFS_KUBE_VOLUMES_DISK_SIZE=profile_config['config']['glusterFsDiskSize']

# Calculate needed local disk capacity
NUM_1GB_LOCAL_SIZE=profile_config_local_volumes['one_gb'].to_i * 1
NUM_5GB_LOCAL_SIZE=profile_config_local_volumes['five_gb'].to_i * 5
NUM_10GB_LOCAL_SIZE=profile_config_local_volumes['ten_gb'].to_i * 10
NUM_30GB_LOCAL_SIZE=profile_config_local_volumes['thirty_gb'].to_i * 30
NUM_50GB_LOCAL_SIZE=profile_config_local_volumes['fifty_gb'].to_i * 50

# Calculate disk size needs for requested local volumes configured in profile-config.json
LOCAL_KUBE_VOLUMES_DISK_SIZE=NUM_1GB_LOCAL_SIZE+NUM_5GB_LOCAL_SIZE+NUM_10GB_LOCAL_SIZE+NUM_30GB_LOCAL_SIZE+NUM_50GB_LOCAL_SIZE+1

puts "Local Disk Size: #{LOCAL_KUBE_VOLUMES_DISK_SIZE}GB"
puts "GlusterFS Disk Size: #{GLUSTERFS_KUBE_VOLUMES_DISK_SIZE}GB"

current_dir    = File.dirname(File.expand_path(__FILE__))
configs        = YAML.load_file("#{current_dir}/config.yaml")
vagrant_config = configs['configs']

ENVIRONMENT_PREFIX = vagrant_config['environment_prefix']
MAIN_NODE_CPU_CORES = vagrant_config['main_node_cpu_cores']
MAIN_NODE_MEMORY = vagrant_config['main_node_memory']
WORKER_NODE_COUNT = vagrant_config['worker_node_count']
WORKER_NODE_CPU_CORES = vagrant_config['worker_node_cpu_cores']
WORKER_NODE_MEMORY = vagrant_config['worker_node_memory']
DOCKERHUB_USER = vagrant_config['dockerhub_username']
DOCKERHUB_EMAIL = vagrant_config['dockerhub_email']
DOCKERHUB_PASSWORD = vagrant_config['dockerhub_password']
BOX_VERSION = vagrant_config['box_version']

Vagrant.configure("2") do |config|
    config.vm.define "kx.as.code-main" do |subconfig|
        subconfig.vm.box = "kx.as.code-main-vmware-#{BOX_VERSION}"
        subconfig.vm.box_url = KX_MAIN_BOX_LOCATION
        subconfig.vm.synced_folder KX_SYNC_FOLDER_PATH, "/home/kx.hero/KX_Share",
            owner: "kx.hero", group: "kx.hero"
            subconfig.vm.provision "file", source: "./profile-config.json", destination: "/var/tmp/profile-config.json"
            subconfig.vm.provision "file", source: "./users.json", destination: "/var/tmp/users.json"
            Dir[File.dirname(__FILE__) + '/aq*.json'].each do |file|
                file_name = File.basename(file)
                subconfig.vm.provision "file", source: file_name, destination: "/var/tmp/" + file_name
            end
            subconfig.vm.provision "shell", inline: 'sudo mv /var/tmp/profile-config.json /usr/share/kx.as.code/workspace/profile-config.json'
            subconfig.vm.provision "shell", inline: 'sudo mv /var/tmp/users.json /usr/share/kx.as.code/workspace/users.json'
            subconfig.vm.provision "shell", inline: 'sudo mv /var/tmp/aq*.json /usr/share/kx.as.code/workspace/'
            subconfig.vm.provision "shell", inline: 'echo -e "$(date "+%Y-%m-%d_%H%M%S") | KX-Worker VM created by Vagrant" | sudo tee /usr/share/kx.as.code/workspace/gogogo'
            subconfig.vm.provision :shell do |s|
              s.inline = "echo -e \"DOCKERHUB_USER=#{DOCKERHUB_USER}\nDOCKERHUB_EMAIL=#{DOCKERHUB_EMAIL}\nDOCKERHUB_PASSWORD=#{DOCKERHUB_PASSWORD}\" | sudo tee /var/tmp/.textfile"
            end
            subconfig.vm.provider "vmware_desktop" do |v|

                kx_main_local_k8s_storage="#{current_dir}/kx-main-local-k8s-storage.vmdk"
                if ARGV[0] == "up" && ! File.exist?(kx_main_local_k8s_storage)
                  `"#{VMWARE_DISK_UTILITY}" -c -s #{LOCAL_KUBE_VOLUMES_DISK_SIZE}GB -a lsilogic -t 1 #{kx_main_local_k8s_storage}`
                end

                kx_main_glusterfs_k8s_storage="#{current_dir}/kx-main-glusterfs-k8s-storage.vmdk"
                if ARGV[0] == "up" && ! File.exist?(kx_main_glusterfs_k8s_storage)
                  `"#{VMWARE_DISK_UTILITY}" -c -s #{GLUSTERFS_KUBE_VOLUMES_DISK_SIZE}GB -a lsilogic -t 1 #{kx_main_glusterfs_k8s_storage}`
                end

                v.gui = true
                v.whitelist_verified = true
                v.vmx['displayname'] = "kx.as.code-#{ENVIRONMENT_PREFIX}-main-#{BOX_VERSION}"
                v.vmx["memsize"] = "#{MAIN_NODE_MEMORY}"
                v.vmx["numvcpus"] = "#{MAIN_NODE_CPU_CORES}"
                v.vmx["mks.enable3d"] = "FALSE"
                v.vmx["ethernet0.pcislotnumber"] = "33"
                v.vmx["sound.startconnected"] = "FALSE"
                v.vmx["sound.present"] = "FALSE"
                v.vmx['scsi0:1.filename'] = kx_main_local_k8s_storage
                v.vmx['scsi0:1.present']  = 'TRUE'
                v.vmx['scsi0:1.redo']     = ''
                v.vmx['scsi0:1.filename'] = kx_main_glusterfs_k8s_storage
                v.vmx['scsi0:1.present']  = 'TRUE'
                v.vmx['scsi0:1.redo']     = ''

        end
    end

    (1..WORKER_NODE_COUNT).each do |i|
        config.vm.define "kx.as.code-worker#{i}" do |subconfig|
          subconfig.vm.box = "kx.as.code-worker-vmware-#{BOX_VERSION}"
          subconfig.vm.box_url = ""
          subconfig.vm.hostname = "kx-worker#{i}"
          subconfig.vm.provision "file", source: "./profile-config.json", destination: "/var/tmp/profile-config.json"
          subconfig.vm.provision "shell", inline: 'sudo mkdir -p /usr/share/kx.as.code/workspace; sudo chown kx.hero:kx.hero /usr/share/kx.as.code/workspace'
          subconfig.vm.provision "shell", inline: 'sudo mv /var/tmp/profile-config.json /usr/share/kx.as.code/workspace/profile-config.json'
          subconfig.vm.provision "shell", inline: 'echo -e "$(date "+%Y-%m-%d_%H%M%S") | KX-Worker VM created by Vagrant" | sudo tee /usr/share/kx.as.code/workspace/gogogo'
          subconfig.vm.provider "vmware_desktop" do |v|

            kx_worker_local_k8s_storage="#{current_dir}/kx-worker#{i}-local-k8s-storage.vmdk"
            if ARGV[0] == "up" && ! File.exist?(kx_worker_local_k8s_storage)
              `"#{VMWARE_DISK_UTILITY}" -c -s #{LOCAL_KUBE_VOLUMES_DISK_SIZE}GB -a lsilogic -t 1 #{kx_worker_local_k8s_storage}`
            end

            v.gui = true
            v.whitelist_verified = true
            v.vmx['displayname'] = "kx.as.code-#{ENVIRONMENT_PREFIX}-worker#{i}-#{BOX_VERSION}"
            v.vmx["memsize"] = "#{WORKER_NODE_MEMORY}"
            v.vmx["numvcpus"] = "#{WORKER_NODE_CPU_CORES}"
            v.vmx["mks.enable3d"] = "FALSE"
            v.vmx["ethernet0.pcislotnumber"] = "33"
            v.vmx["sound.startconnected"] = "FALSE"
            v.vmx["sound.present"] = "FALSE"
            v.vmx['scsi0:1.filename'] = kx_worker_local_k8s_storage
            v.vmx['scsi0:1.present']  = 'TRUE'
            v.vmx['scsi0:1.redo']     = ''

          end
        end
      end
  end


  
